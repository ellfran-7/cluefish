[{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"preface","dir":"Articles","previous_headings":"","what":"Preface","title":"Introduction to cluefish","text":"vignette intended help users wish use Cluefish. first part vignette dedicated introduction context Cluefish developped, followed overview workflow. second part dedicated step--step guide main Cluefish workflow using example dataset.","code":""},{"path":[]},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"a-bit-of-context","dir":"Articles","previous_headings":"Introduction","what":"A bit of context","title":"Introduction to cluefish","text":"transcriptomics, analyses yield extensive transcript lists require impractical manual literature reviews. address , functional enrichment (FE) analysis, also known pathway enrichment analysis, become standard approach. method condenses large gene lists manageable interpretable sets biological functions pathways (Das, McClain, Rai 2020). FE relies predefined gene sets representing molecular functions, biological processes pathways, outlined resources like Gene Ontology (GO) (Ashburner et al. 2000) pathway databases KEGG (Kanehisa Goto 2000) Wikipathways (Martens et al. 2021). FE approaches evolved four generations: -Representation Analysis (ORA), Functional Class Scoring (FCS), Pathway Topology (PT), Network Topology (NT)-based methods1. generation introduced improvements accounting gene co-expression, pathway topology, network crosstalk. However, PT NT-based approaches face limitations due incomplete pathway network information lesser studied organisms, making ORA FCS widely used methods (Liu, Wei, Ruan 2017). dose-response (DR) studies, explore relationship exposure biological effect, DR omics analyses play critical role (Lovell 2016). Unlike standard differential expression analyses, DR methods, DRomics (Dose-Response Omics) R package (Larras et al. 2018), model full DR relationship transcript rather just fold-change conditions. models, benchmark dose (BMD) calculated transcript : dose represents specific change response, indicating gene‚Äôs sensitivity stressor (Committee et al. 2017). differential gene expression analysis provides fold-change values associated p-values, modeling approaches, DRomics, characterize entire DR relationship. PT-based enrichment FCS, rely fold-change values, therefore adapted functional enrichment DR context (Khatri, Sirota, Butte 2012). ORA currently suitable method available complement DR modeling, exclusively uses deregulaged gene lists. However, ORA comes several limitations. enrichment results, often based Fisher‚Äôs Exact Tests, can biased towards broad biological functions, since using deregulated genes makes harder reach statistical significance smaller specialized functions. tendency intrinsically tied granularity gene sets certain databases (e.g., GO). Gene sets associated biological process/pathway may overly specific, others general, potentially compromising relevance analysis (Karp et al. 2021; Mubeen et al. 2022). Additionally, gene sets may vary specificity, results often reflect part deregulated gene list. Therefore, ORA alone (hereafter referred ‚Äústandard approach‚Äù) insufficient interpreting complex DR data, combining additional methods essential capture fuller precise view biological context.","code":""},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"overview-of-cluefish","dir":"Articles","previous_headings":"Introduction","what":"Overview of Cluefish","title":"Introduction to cluefish","text":"address limitations, developed Cluefish (Franklin et al., submitted), free open-source, semi-automated workflow designed comprehensive untargeted exploration DR transcriptomic data. name reflects three key concepts driving workflow: Clustering, Enrichment, Fishing‚Äîmetaphorically aligned ‚Äúfishing clues‚Äùüé£ complex biological data. Cluefish composed 10 main steps: Download transcription factor (TF) co-factor (CoTF) gene annotations (optional) (Step 1). Load background deregulated transcript lists (Step 2). Retrieve gene identifiers (Step 3). Assign regulatory status (Step 4) (possible Step 1 performed). Construct, cluster PPI network deregulated gene list retrieve results (Step 5). Filter gene clusters based gene set size (Step 6). Perform cluster-wise functional enrichment (Step 7). Merge clusters sharing enriched biological functions (Step 8). Fish lonely genes existing clusters based shared functional annotations (Step 9). Perform simple functional enrichment remaining lonely genes, forming lonely cluster (Step 10). Cluefish integrates valuable information various biological functional/pathway databases (e.g., GO, KEGG, WP), AnimalTFDB4 database transcription factors co-factors >180 animal genomes, STRING database known predicted PPIs >12,000. Despite drawing multiple complementary resources, databases collectively provide broad coverage organisms, ensuring Cluefish applicable wide range model non-model species.","code":""},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to cluefish","text":"can use Cluefish locally one two ways: Clone repository via terminal: Install developmental version Cluefish GitHub R (remotes needed):","code":"git clone https://github.com/ellfran-7/cluefish.git if (!requireNamespace(\"remotes\", quietly = TRUE))   install.packages(\"remotes\")  remotes::install_github(\"ellfran-7/cluefish\")"},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"additional-requirements","dir":"Articles","previous_headings":"","what":"Additional Requirements","title":"Introduction to cluefish","text":"Cluefish workflow developed R, R installed prerequisite. can download . enhanced experience, recommend using RStudio integrated development environment (IDE), available download link, . Additionally, Cluefish relies external open source software intermediate step within workflow. Please ensure following tools installed: Cytoscape: Cluefish uses Cytoscape order visualize PPI networks. Install Cytoscape download page. Required Cytoscape Apps: Within Cytoscape, install StringApp clusterMaker2 apps. : Open Cytoscape Navigate Apps > App Store > Show App Store Search install ‚ÄúStringApp‚Äù (retrieving STRING protein interactions) ‚ÄúclusterMaker2‚Äù (clustering network data). can also view apps Cytoscape App Store.","code":""},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"naming-convention","dir":"Articles","previous_headings":"","what":"Naming Convention","title":"Introduction to cluefish","text":"enhance consistency readability, incorporated standardized naming convention data files, inputs, intermediate objects, outputs: dr: deregulated data (deregulated items) bg: background data (experimental items) t: transcript-per-row data, row corresponds single transcript g: gene-per-row data, row corresponds single gene Annotation: aforementioned patterns, optional biological annotation ‚Äò‚Äô appended. annotation facilitates specific delineation, providing one row per annotation. example, ‚Äòt_a‚Äô signifies data formatted one row corresponding single transcript alongside one corresponding annotations. Examples: bg_t_data: background data row corresponding single transcript dr_g_a_data: deregulated data row corresponding specific combination gene annotation","code":""},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Introduction to cluefish","text":"run Cluefish workflow, can use make.R script, serves ‚Äòmaster‚Äô script entire process. recommend using script template ensure smooth sequential execution workflow steps. go main steps one one !","code":""},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"the-case-study","dir":"Articles","previous_headings":"Usage","what":"The case study","title":"Introduction to cluefish","text":"order showcase Cluefish, use example dataset. dose-response transcriptomic dataset, zebrafish embryos exposed five dose-gradient dibutyl phthalate. experiment resulting dataset described paper (Franklin et al., submitted) (add link/DOI)!!!!!!!!!!!!!!!) may access count data GEO, accession number GSE283957.","code":""},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"before-walking","dir":"Articles","previous_headings":"Usage","what":"Before walking","title":"Introduction to cluefish","text":"key feature Cluefish integration renv (Ushey Wickham 2024) create reproducible environments. enables install required R packages two ways: Install latest package versions renv::install(). full reproducibility, install exact package versions specified renv.lock file running renv::restore(). Note process may take longer. packages installed restored, can load project R functions : errors appeared, set go !","code":"renv::install() renv::restore() devtools::load_all(here::here())"},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"step1","dir":"Articles","previous_headings":"Usage","what":"Step 1: Download transcription (co-)factor annotations","title":"Introduction to cluefish","text":"proceeding, check organism interest available AnimalTFDB database. list supported species can found website: Go AnimalTFDB. organism listed database, may skip step. organism listed, retrieve URLs transcription (TF) co-transcription factors (CoTF). example, URLs zebrafish (Danio rerio) : TF: ‚Äúhttps://guolab.wchscu.cn/AnimalTFDB4_static/download/TF_list_final/Danio_rerio_TF‚Äù CoTF: ‚Äúhttps://guolab.wchscu.cn/AnimalTFDB4_static/download/Cof_list_final/Danio_rerio_Cof‚Äù download data different species, replace ‚ÄúDanio_rerio‚Äù URL Latin name organism. Use dl_regulation_data() function downloads TF CoTF data files specified directory. Customize file paths names setting function arguments shown : overwrite argument controls whether existing files name target directory replaced. Setting overwrite = TRUE allows function overwrite files, overwrite = FALSE preserves existing files prevent accidental loss data. info argument function, run ?cluefish::dl_regulation_data(). simplicity vignette, use two pre-saved example files: example_TF_file.txt example_CoTF_file.txt. transcription (co)factor data used Step 3 determine regulatory status deregulated genes.","code":"dl_regulation_data(   url_tf = \"https://guolab.wchscu.cn/AnimalTFDB4_static/download/TF_list_final/Danio_rerio_TF\",   url_cof = \"https://guolab.wchscu.cn/AnimalTFDB4_static/download/Cof_list_final/Danio_rerio_Cof\",   path = \"your/chosen/path\", # the path where you want to save the files   filename_tf = \"TF_filename.txt\", # the chosen TF filename    filename_cof = \"CoTF_filename.txt\"), # the chosen CoTF filename   overwrite = TRUE )"},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"step2","dir":"Articles","previous_headings":"Usage","what":"Step 2: Load background and deregulated transcripts lists","title":"Introduction to cluefish","text":"step, load background deregulated transcript lists. must acquired beforehand. background transcript list corresponds character vector transcript IDs detected experiment, whereas deregulated transcript list contains IDs significantly deregulated transcripts. Multiple identifiers available transcripts genes. Pay special attention type transcript identifier used, crucial next step. instance, ‚ÄúENSDART00000080481.6‚Äù Ensembl transcript stable ID rxraa-201. inputs can derived selection method, Cluefish optimised work seamlessly results DRomics. addition, Cluefish leverages DRomics visualization functions modelling metrics provide deeper insights biological interpretation data. DRomics analysis performed beforehand case, can retrieve outputs : drcfit() function: holding background transcript list bmdboot() function: holding deregulated transcript list can get look transcript identifiers count list either str(): dplyr package installed:","code":"# Load the DRomics \"drcfit\" object f <- readRDS(file = \"data/example_fitres.rds\") # Load the DRomics \"bmdboot\" object results ($res) b <- readRDS(file = \"data/example_bootres.rds\")  # Extract the background transcript identifiers as a character vector bg_transcript_list <- f$omicdata$item # Extract the deregulated transcript identifiers as a character vector dr_transcript_list <- b$id str(bg_transcript_list) #>  chr [1:39890] \"ENSDART00000139936.2\" \"ENSDART00000192840.1\" ... str(dr_transcript_list) #>  chr [1:2433] \"ENSDART00000139096.2\" \"ENSDART00000127420.3\" ... dplyr::glimpse(bg_transcript_list) #>  chr [1:39890] \"ENSDART00000139936.2\" \"ENSDART00000192840.1\" ... dplyr::glimpse(dr_transcript_list) #>  chr [1:2433] \"ENSDART00000139096.2\" \"ENSDART00000127420.3\" ..."},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"step3","dir":"Articles","previous_headings":"Usage","what":"Step 3: Retrieve gene identifiers","title":"Introduction to cluefish","text":"Next, retrieve specific gene identifiers. proceeding, recommend gathering essential elements Ensembl BioMart: Ensembl BioMart service organism‚Äôs dataset located specific dataset name species within BioMart service. identifiers want retrieve (e.g, gene) ‚Äôs important gather information advance, element unique naming conventions specific Ensembl BioMart. : Identify Ensembl BioMart services currently available. list active services, use listEnsembl() function (listMarts()): main Ensembl BioMart service provides annotations vertebrate genomes. annotations Protists, Metazoa, Fungi, specialized BioMart interfaces also available. can use listEnsemblGenomes()function list options: appropriate Ensembl BioMart service identified, connect using useMart(), useEnsembl(), useEnsemblGenomes(). Specify biomart argument name previous step‚Äôs output: Within selected BioMart service, species dataset. List available datasets using listDatasets() function: BioMart allows retrieve various types information (e.g., gene transcript IDs). Use either listAttributes() listFilters() view available identifiers filters: required elements gathered, employ getids() function retrieve gene (gene_id) gene name (gene_name) identifiers corresponding transcript identifiers (transcript_id) associated background transcript list (bg_transcripts_list). Important: ensure compatibility databases tools used later Cluefish‚Äîspecifically STRING database g:Profiler‚Äîimportant output dataframe getids() function includes least one identifier supported platforms. However, single identifier meets requirement, two separate identifiers may used, ensuring one valid STRING g:Profiler. example, case Danio rerio (Zebrafish), Ensembl gene ID supported platforms, eliminating need additional identifier conversion. However, case Daphnia magna (Water flea), Ensembl gene ID supported g:Profiler STRING database. case, UniProt Protein identifier supported STRING, identifiers retrieved ensure compatibility. information argument function, run ?cluefish::getids().  gene_id: identifier essential downstream steps, querying protein-protein interaction (PPI) network (Step 5) performing functional enrichment using g:profiler (Step 7). instance, Danio rerio organism, ensembl_gene_id supported STRING g:profiler database, minimizing need additional ID conversions ensuring compatibility across resources. gene_name: identifier enhances biological interpretability providing descriptive labels, external_gene_name description. labels offer intuitive gene names clarify gene functions roles biological processes, aiding result interpretation annotation. other_id: Additional identifiers can rerquested annotation needs, protein IDs alternative identifiers related specific transcripts gene annotations.  many cases, single gene can multiple transcripts, gene symbol (like external_gene_name) may correspond different Ensembl gene IDs, creating redundancy data. getids() function handles redundancy : Checking query includes ‚Äúexternal_gene_name‚Äù attribute gene_name argument. Identifying duplicate transcript_id /gene_id entries across rows. duplicates found, function assigns unique names gene_name using _g#t# format: g# represents gene index t# represents transcript index example: single gene_id multiple transcripts gene_name (like ‚Äúagrn‚Äù), function labels ‚Äúagrn_g1t1‚Äù, ‚Äúagrn_g1t2‚Äù, . indicates different transcripts gene. another gene_id gene_name appears, gets new gene index, resulting labels like ‚Äúagrn_g2t1, indicating belongs second gene. gene_name found certain transcripts, function assigns ‚ÄúUnknown‚Äù applies _g#t# numbering (e.g., Unknown_g1t1, Unknown_g1t2). systematic labeling helps make transcript-gene relationship unique, aiding clear interpretation visualization results.  can get look structure output: result consists background list identifiers, need subset deregulated data. can done shown :","code":"biomaRt::listMarts() biomaRt::listEnsembl() biomaRt::listEnsemblGenomes() ensembl <- biomaRt::useMart(biomart = \"ENSEMBL_MART_ENSEMBL\") biomaRt::listDatasets(mart = ensembl) biomaRt::listAttributes(mart = ensembl) #OR  biomaRt::listFilters(mart = ensembl) bg_t_ids <- getids(   id_query = bg_transcripts_list,    biomart_db = \"ENSEMBL_MART_ENSEMBL\",   species_dataset = \"drerio_gene_ensembl\",   transcript_id = \"ensembl_transcript_id_version\",   gene_id = \"ensembl_gene_id\",   gene_name = \"external_gene_name\",   other_id = NULL ) dplyr::glimpse(bg_t_ids) #> Rows: 39,890 #> Columns: 3 #> $ transcript_id <chr> \"ENSDART00000000678.7\", \"ENSDART00000000877.7\", \"ENSDART‚Ä¶ #> $ gene_id       <chr> \"ENSDARG00000000638\", \"ENSDARG00000044279\", \"ENSDARG0000‚Ä¶ #> $ gene_name     <chr> \"opn1mw4\", \"opn1mw3\", \"psmb13a\", \"unknown.1\", \"drd2l_t1\"‚Ä¶ dr_t_ids <- bg_t_ids[bg_t_ids$transcript_id %in% dr_transcript_list,]"},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"step4","dir":"Articles","previous_headings":"Usage","what":"Step 4: Determine deregulated gene regulatory status","title":"Introduction to cluefish","text":"step involves determining regulatory status deregulated genes, using TF CoTF files downloaded Step 1. organism supported AnimalTFDB, can skip step! TF CoTF files available, use getregs() function add regulatory status column (TF). column contain logical value (TRUE/FALSE), indicating whether gene TF CoTF. function requires output previous getids() function file paths TF CoTF files. information argument function, run ?cluefish::getregs(). can look structure output:","code":"dr_t_regs <- getregs(   getids_data = dr_t_ids,   regulator_file = \"data/example_TF_file.txt\",   coregulator_file = \"data/example_CoTF_file.txt\" ) dplyr::glimpse(dr_t_regs) #> Rows: 2,433 #> Columns: 4 #> $ transcript_id <chr> \"ENSDART00000135999.2\", \"ENSDART00000173686.2\", \"ENSDART‚Ä¶ #> $ gene_id       <chr> \"ENSDARG00000092550\", \"ENSDARG00000033683\", \"ENSDARG0000‚Ä¶ #> $ gene_name     <chr> \"unknown.4894\", \"tpma_t3\", \"adgrl4_t2\", \"rnf144aa\", \"SLC‚Ä¶ #> $ TF            <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, ‚Ä¶"},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"step5","dir":"Articles","previous_headings":"Usage","what":"Step 5: Construct and retrieve the clustered protein-protein interaction (PPI) network","title":"Introduction to cluefish","text":"step involves creating clustered protein-protein interaction (PPI) network using Cytoscape, external visualization tool. Start saving R output file: file saved, open Cytoscape follow steps import, create, cluster PPI network, return R environment continue analysis. write.table(dr_t_regs, file = \"/chosen/path/filename.txt\", row.names = FALSE, sep = \"\\t\") Start 1 2 3 4 5 6 7 8 9  Cytoscape, go File > Import > Table File  Select saved text file, click Open, name table select OK  Right-click column ids querying proteins (e.g., gene_id) (1), select Copy Column Values (2)  Ensure using Protein Query feature StringApp.  StringApp query section, paste (Ctrl+V) copied values  Adjust query settings: Click ‚Äúoptions‚Ä¶‚Äù icon Select species (e.g., Danio rerio) Select network type2 Select confidence score cutoff3 Make sure maximum additional interactors ‚Äú0‚Äù!4 Visit STRING documentation getting fuller understand concepts.  Run query (1), view PPI network, click ‚ÄúClustering‚Äù (2)  Choose granularity (inflation) value adjust cluster sizes5, click ‚ÄúOK‚Äù  Open Node Table (1) click Export Tables File... icon (2). Finally, save table .csv format within working directory. node table saved, can now return R environment import table.","code":""},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"section-9","dir":"Articles","previous_headings":"","what":"Introduction to cluefish","title":"Introduction to cluefish","text":"Using getclustrs() function, retrieve merge node table output getregs() function. Therefor requires output function used Step 3, column name use merging nodetable path filename, shown : information argument function, run ?cluefish::getclustrs(). can look structure output: can also get idea size clusters:","code":"dr_t_clustrs <- getclustrs(   gene_data = dr_t_regs,   colname_for_merge = \"gene_id\",   path = \"your/chosen/path\",   nodetable_filename = \"filename.csv\" ) dplyr::glimpse(dr_t_clustrs) #> Rows: 775 #> Columns: 5 #> $ gene_id       <chr> \"ENSDARG00000000068\", \"ENSDARG00000000086\", \"ENSDARG0000‚Ä¶ #> $ transcript_id <chr> \"ENSDART00000000069.8\", \"ENSDART00000132378.4\", \"ENSDART‚Ä¶ #> $ gene_name     <chr> \"nherf1a_g2t1\", \"itsn1\", \"pms1_t2\", \"asnsd1_t2\", \"unknow‚Ä¶ #> $ TF            <lgl> FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, F‚Ä¶ #> $ clustr        <int> 139, 140, 27, 172, 159, 56, 47, 36, 187, 164, 144, 52, 6‚Ä¶ table(dr_t_clustrs$clustr) #>  #>   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  #>  41  35  22  18  17  14  12  12   8   8   7   7   7   8   6   6   6   6   7   6  #>  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  #>   6   6   5   5   6   5   5   5   7   5   5   5   5   5   5   5   5   5   4   4  #>  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  #>   5   5   4   4   4   4   4   4   5   4   4   4   4   3   3   4   3   3   3   3  #>  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  #>   3   3   3   3   3   5   3   3   3   3   3   3   3   3   3   3   3   3   3   3  #>  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100  #>   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3  #> 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120  #>   3   3   2   2   3   3   2   2   3   2   4   2   2   2   2   2   2   2   2   2  #> 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140  #>   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   3  #> 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160  #>   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2  #> 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180  #>   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2  #> 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200  #>   2   2   2   3   2   2   2   2   2   2   3   2   2   2   3   2   3   2   2   2  #> 201 202 203 204  #>   2   2   2   2"},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"step6","dir":"Articles","previous_headings":"Usage","what":"Step 6: Filter clusters","title":"Introduction to cluefish","text":"step, filter clusters based gene set sizes using lower cluster size filter. filter retains clusters meeting exceeding specified minimum size, helping focus clusters likely biologically relevant. function clustrfiltr() applies filter, requiring two main arguments: getclustrs_data: output getclustrs() function desired lower cluster size filter value. choice size limit depends factors type study, organism, prior steps PPI network creation clustering. Setting higher size limit retain fewer, larger clusters, lower limit include large small clusters. Note : Large clusters may lack specific biological context due broad inclusivity. Small clusters might represent distinct biological complexes specific particular cases interactions. Consider factors deciding appropriate size limit. information argument function, run ?cluefish::clustrfiltr(). function outputs named list three components: kept: dataframe type t holding clusters retained filtering removed: dataframe type t holding clusters filtered params: list main parameters used; case choice size_filtr can take look output‚Äôs structure: can also see clusters retained: Genes retained step now become lonely genes.","code":"dr_t_clustrs_filtr <- clustrfiltr(   getclustrs_data = dr_t_clustrs,   size_filtr = 4 # default value ) #> Total clusters kept: 53 / 204 dplyr::glimpse(dr_t_clustrs_filtr) #> List of 3 #>  $ kept   :'data.frame': 411 obs. of  5 variables: #>   ..$ gene_id      : chr [1:411] \"ENSDARG00000003564\" \"ENSDARG00000003599\" \"ENSDARG00000005791\" \"ENSDARG00000006413\" ... #>   ..$ transcript_id: chr [1:411] \"ENSDART00000018515.5\" \"ENSDART00000011251.10\" \"ENSDART00000175435.2\" \"ENSDART00000021069.8\" ... #>   ..$ gene_name    : chr [1:411] \"dohh\" \"rpl3_t2\" \"rpl28_t2\" \"rpl38\" ... #>   ..$ TF           : logi [1:411] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ clustr       : int [1:411] 1 1 1 1 1 1 1 1 1 1 ... #>  $ removed:'data.frame': 364 obs. of  5 variables: #>   ..$ gene_id      : chr [1:364] \"ENSDARG00000023152\" \"ENSDARG00000041155\" \"ENSDARG00000101216\" \"ENSDARG00000077822\" ... #>   ..$ transcript_id: chr [1:364] \"ENSDART00000030984.4\" \"ENSDART00000139441.2\" \"ENSDART00000172204.2\" \"ENSDART00000113752.3\" ... #>   ..$ gene_name    : chr [1:364] \"wdr73_g2t1\" \"morf4l1\" \"meaf6_t2\" \"si:dkey-6i22.5\" ... #>   ..$ TF           : logi [1:364] FALSE TRUE TRUE FALSE FALSE FALSE ... #>   ..$ clustr       : int [1:364] 54 54 54 55 55 55 56 56 56 56 ... #>  $ params :List of 1 #>   ..$ size_filtr: num 4 #>  - attr(*, \"class\")= chr \"clustrfiltres\" table(dr_t_clustrs_filtr$kept$clustr) #>  #>  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #> 41 35 22 18 17 14 12 12  8  8  7  7  7  8  6  6  6  6  7  6  6  6  5  5  6  5  #> 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  #>  5  5  7  5  5  5  5  5  5  5  5  5  4  4  5  5  4  4  4  4  4  4  5  4  4  4  #> 53  #>  4"},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"step7","dir":"Articles","previous_headings":"Usage","what":"Step 7: Perform cluster-wise functional enrichment","title":"Introduction to cluefish","text":"step applies -Representation Analysis (ORA) characterize cluster using gprofiler2 R package (Kolberg et al. 2020), interfaces g:Profiler‚Äôs (Kolberg et al. 2023) ressources functions. g:GOst function performs ORA across multiple gene lists, analyzing sources GO, KEGG, WP. information g:Profiler g:GOst, visit web interface . clustrenrich() function, built g:GOst, performs cluster-wise ORA. function applies g:GOst‚Äôs highlighting GO driver terms considering underlying topology annotations, described Kolberg et al.¬†2023. Consider following g:GOst key options: sources: Functional data sources analyze (e.g.¬†‚ÄúGO‚Äù, ‚ÄúKEGG‚Äù) domain_scope: Background choice (e.g.¬†‚Äúannotated‚Äù, ‚Äúknown‚Äù, ‚Äúcustom‚Äù) correction_method: Multiple testing correction method, e.g., FDR user_threshold: P-value threshold significance, e.g.¬†0.05 key options, many others available. require careful thought select best value, method, scope. details, check documentation site reading help function running ?gprofiler2::gost() R. Additionally, two new filters integrated construction clustrenrich() function: Biological function size filter (min_term_size max_term_size): Filter based upper lower gene set size limits control biological function specificity large gene sets, dependent organism, often associated broad biological processes. can introduce noise obscure specific functions. Conversely, small gene sets can overly specific may capture full biological context pathway. Enrichment gene count filter (ngenes_enrich_filtr): Filters based number genes contributing enrichment cluster. Small clusters can lead higher rate false positives, enrichments based genes may provide substantial biological insight cluster . function data inputs include: clustrfiltr_data: named list output clustrfiltr() function dr_genes: character vector deregulated genes can correspond gene_id column output getids() getregs() function. bg_genes: character vector background genes (preferably experiment) typically corresponds ‚Äògene_id‚Äô column output getids() function. information argument function, run ?cluefish::clustrenrich(). output named list four components: dr_g_a_enrich: dataframe type g_a holding cluster-wise enrichment results gostres: named list corresponding original result output g:GOst dr_g_a_whole: dataframe type g_a holding biological function annotations found g:profiler database deregulated genes. c_simplify_log: dataframe tracing number biological functions enriched per cluster filtering step source. params: list main parameters used; case choice monoterm_fusion can take look structure dr_g_a_enrich dataframe: running function, recommend checking filters need adjustment, finding right lower upper limits gene set sizes can quite challenge. limits depend organism, type transcriptomic data, constitutes ‚Äògeneral‚Äô terms study. help determine size limits suitable, following code lists terms associated deregulated genes descending order size, giving insight generality terms guiding needed adjustments: DT package installed, can view data interactively viewer pane:","code":"clustr_enrichres <- clustrenrich(   clustrfiltr_data = dr_t_clustrs_filtr,   dr_genes = dr_t_regs$gene_id,   bg_genes = bg_t_ids$gene_id,   bg_type = \"custom_annotated\",   sources = c(\"GO:BP\", \"KEGG\", \"WP\"),    organism = \"drerio\",   user_threshold = 0.05,   correction_method = \"fdr\",   exclude_iea = FALSE,    min_term_size = 5,   max_term_size = 500,   only_highlighted_GO = TRUE,   ngenes_enrich_filtr = 3,   path = \"your/chosen/path\",   output_filename = \"filename.rds\",   overwrite = FALSE ) #> Rows: 754 #> Columns: 5 #> $ gene_id   <chr> \"ENSDARG00000051783\", \"ENSDARG00000009285\", \"ENSDARG00000020‚Ä¶ #> $ clustr    <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ‚Ä¶ #> $ term_name <chr> \"Cytoplasmic ribosomal proteins\", \"Cytoplasmic ribosomal pro‚Ä¶ #> $ term_id   <chr> \"WP:WP324\", \"WP:WP324\", \"WP:WP324\", \"WP:WP324\", \"WP:WP324\", ‚Ä¶ #> $ source    <chr> \"WP\", \"WP\", \"WP\", \"WP\", \"WP\", \"WP\", \"WP\", \"WP\", \"WP\", \"WP\", ‚Ä¶ clustr_enrichres$dr_g_a_whole |>    dplyr::group_by(term_name) |>    dplyr::summarise(count = dplyr::n()) |>    dplyr::arrange(desc(count)) |>    print(n = 10) # Number of rows to print, adjustable based on the study #> # A tibble: 3,646 √ó 2 #>    term_name                           count #>    <chr>                               <int> #>  1 biological_process                   1509 #>  2 cellular process                     1299 #>  3 metabolic process                     903 #>  4 organic substance metabolic process   855 #>  5 primary metabolic process             832 #>  6 nitrogen compound metabolic process   776 #>  7 cellular metabolic process            771 #>  8 macromolecule metabolic process       718 #>  9 KEGG root term                        707 #> 10 biological regulation                 556 #> # ‚Ñπ 3,636 more rows clustr_enrichres$dr_g_a_whole |>    dplyr::group_by(term_name) |>    dplyr::summarise(count = dplyr::n()) |>   DT::datatable(     options = list(pageLength = 10     ),     filter = 'top',     class = c(\"compact\")   )"},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"step8","dir":"Articles","previous_headings":"Usage","what":"Step 8: Merge clusters","title":"Introduction to cluefish","text":"Following cluster characterisation, step consists identifying merging clusters share enriched biological functions least one specified data source (e.g.¬†GO, KEGG etc.) ORA. step allows us merge multiple clusters gene proteins found sufficiently interactive STRING considered single cluster. However, functional enrichment revealed participate biological processes. Therefore, clusters merge form larger comprehensive cluster, holding unique biological context. , step uses clustrfusion() function, requires output clustrenrich() function input data. merging process conducted separately data source, descending order total number unique genes present data source background list. optional parameter, monoterm_fusion, can set TRUE restrict merging clusters share single, identical enrichment term least one source. ensures merged clusters consistently linked specific biological function, maintaining coherent biological context. default set FALSE merging process becomes highly stringent, requires clusters associated unique biological function. can significantly limit likelihood merging. output named list four components: dr_g_a_fusion: dataframe type g_a holding cluster fusion results dr_g_a_fusion: dataframe type c_a holding cluster fusion results c_fusionlog: dataframe tracing cluster fusion events, indicating sources originated (e.g.¬†GO, KEGG WP) params: list main parameters used; case choice monoterm_fusion can take look structure output:","code":"clustr_fusionres <- clustrfusion(   clustrenrich_data = clustr_enrichres,   monoterm_fusion = FALSE ) #> 44 / 53 clusters left after the fusion process. dplyr::glimpse(clustr_fusionres) #> List of 4 #>  $ dr_g_a_fusion:'data.frame':   754 obs. of  6 variables: #>   ..$ gene_id   : chr [1:754] \"ENSDARG00000051783\" \"ENSDARG00000009285\" \"ENSDARG00000020197\" \"ENSDARG00000043509\" ... #>   ..$ old_clustr: num [1:754] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ new_clustr: num [1:754] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ term_name : chr [1:754] \"Cytoplasmic ribosomal proteins\" \"Cytoplasmic ribosomal proteins\" \"Cytoplasmic ribosomal proteins\" \"Cytoplasmic ribosomal proteins\" ... #>   ..$ term_id   : chr [1:754] \"WP:WP324\" \"WP:WP324\" \"WP:WP324\" \"WP:WP324\" ... #>   ..$ source    : chr [1:754] \"WP\" \"WP\" \"WP\" \"WP\" ... #>  $ dr_c_a_fusion:'data.frame':   153 obs. of  7 variables: #>   ..$ old_clustr : num [1:153] 1 1 1 1 1 1 2 2 2 2 ... #>   ..$ new_clustr : num [1:153] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ term_name  : chr [1:153] \"Cytoplasmic ribosomal proteins\" \"embryo development ending in birth or egg hatching\" \"myeloid cell differentiation\" \"ribonucleoprotein complex biogenesis\" ... #>   ..$ term_size  : int [1:153] 60 180 89 175 102 351 60 7 102 351 ... #>   ..$ term_id    : chr [1:153] \"WP:WP324\" \"GO:0009792\" \"GO:0030099\" \"GO:0022613\" ... #>   ..$ source     : chr [1:153] \"WP\" \"GO:BP\" \"GO:BP\" \"GO:BP\" ... #>   ..$ highlighted: logi [1:153] FALSE TRUE TRUE TRUE FALSE TRUE ... #>  $ c_fusionlog  :'data.frame':   754 obs. of  4 variables: #>   ..$ old_clustr        : num [1:754] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ after_GO:BP_fusion: num [1:754] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ after_KEGG_fusion : num [1:754] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ after_WP_fusion   : num [1:754] 1 1 1 1 1 1 1 1 1 1 ... #>  $ params       :List of 1 #>   ..$ monoterm_fusion: logi FALSE #>  - attr(*, \"class\")= chr \"clustrfusion\""},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"step9","dir":"Articles","previous_headings":"Usage","what":"Step 9: Fish lonely genes","title":"Introduction to cluefish","text":"Genes assigned cluster referred lonely genes. genes typically explored contribute functional enrichment, thus, help characterizing data. step involves ‚Äúfishing‚Äù lonely genes existing clusters. Genes become lonely one two cases : initially sufficiently interactive another protein complex participate form cluster initially part cluster failed pass cluster size filtering step, thus falling lonely cluster. ‚Äúfish‚Äù genes meaningfully, lonelyfishing() function matches lonely genes clusters share functional annotations, incorporates cluster. lonely gene friendliness metric, representing number potentiel clusters can incorporated . friendliness filter allows user set limit metric, solely fishing genes fall limit, genes exceed limit remain lonely cluster. Low values limit, 1 3, result fewer lonely genes incorporated reduce redundancy clusters. Although approach fish much, ensures lonely genes associated wide range biological functions distributed across many clusters, thereby minimizing noise results. default, limit set 0, meaning applied, lonely genes eligible fishing incorporated. function‚Äôs data inputs include: dr_data: dataframe type t typically corresponds output getids() getregs(). input holds least gene_id term_name columns, respectively containing gene identifiers biological function annotations deregulated genes. Recommended hold also transcript_id futur functions. clustrenrich_data: named list output clustrenrich() function. clustrfusion_data: named list output clustrfusion() function. information argument function, run ?cluefish::lonelyfishing(). output lonelyfishing() named list holding 3 components, : dr_g_a_fishing: dataframe type t_c_a holding lonely fishing results dr_c_a_fishing: dataframe lonely fishing results similar clustrfusion_data$dr_c_a_fusion dataframe row combination cluster ID biological function annotation. params: list main parameters used; case friendly_limit can take look structure output:","code":"lonely_fishres <- lonelyfishing(   dr_data = dr_t_regs,   clustrenrich_data = clustr_enrichres,   clustrfusion_data = clustr_fusionres,   friendly_limit = 0,    path = \"your/chosen/path\",   output_filename = \"filename.rds\",   overwrite = FALSE ) dplyr::glimpse(lonely_fishres) #> List of 3 #>  $ dr_t_c_a_fishing:'data.frame':    9841 obs. of  10 variables: #>   ..$ transcript_id: chr [1:9841] \"ENSDART00000175435.2\" \"ENSDART00000175435.2\" \"ENSDART00000175435.2\" \"ENSDART00000175435.2\" ... #>   ..$ gene_id      : chr [1:9841] \"ENSDARG00000005791\" \"ENSDARG00000005791\" \"ENSDARG00000005791\" \"ENSDARG00000005791\" ... #>   ..$ gene_name    : chr [1:9841] \"rpl28_t2\" \"rpl28_t2\" \"rpl28_t2\" \"rpl28_t2\" ... #>   ..$ TF           : logi [1:9841] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ old_clustr   : chr [1:9841] \"1\" \"1\" \"1\" \"1\" ... #>   ..$ new_clustr   : chr [1:9841] \"1\" \"1\" \"1\" \"1\" ... #>   ..$ friendliness : int [1:9841] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ term_name    : chr [1:9841] \"embryo development ending in birth or egg hatching\" \"embryo development ending in birth or egg hatching\" \"embryo development ending in birth or egg hatching\" \"embryo development ending in birth or egg hatching\" ... #>   ..$ term_id      : chr [1:9841] \"GO:0009792\" \"GO:0009792\" \"GO:0009792\" \"GO:0009792\" ... #>   ..$ source       : chr [1:9841] \"GO:BP\" \"GO:BP\" \"GO:BP\" \"GO:BP\" ... #>  $ dr_c_a_fishing  :'data.frame':    242 obs. of  7 variables: #>   ..$ old_clustr : chr [1:242] \"1\" \"1\" \"1\" \"1\" ... #>   ..$ new_clustr : chr [1:242] \"1\" \"1\" \"1\" \"1\" ... #>   ..$ term_name  : chr [1:242] \"Cytoplasmic ribosomal proteins\" \"embryo development ending in birth or egg hatching\" \"myeloid cell differentiation\" \"Protein export\" ... #>   ..$ term_size  : int [1:242] 60 180 89 26 175 102 351 60 7 102 ... #>   ..$ term_id    : chr [1:242] \"WP:WP324\" \"GO:0009792\" \"GO:0030099\" \"KEGG:03060\" ... #>   ..$ source     : chr [1:242] \"WP\" \"GO:BP\" \"GO:BP\" \"KEGG\" ... #>   ..$ highlighted: logi [1:242] FALSE TRUE TRUE FALSE TRUE FALSE ... #>  $ params          :List of 1 #>   ..$ friendly_limit: num 0 #>  - attr(*, \"class\")= chr \"lonelyfishingres\""},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"step10","dir":"Articles","previous_headings":"Usage","what":"Step 10: Perform functional enrichment of the lonely cluster genes","title":"Introduction to cluefish","text":"lonely cluster, consisting remaining lonely genes, can undergo simple functional enrichment analysis gain insight biological context may contain. customizations used earlier cluster-wise enrichment analysis fully applicable well. Therefore, parameters set match chosen previous cluster-wise functional enrichment analysis. function simplenrich() enables single ORA, parameters mirroring earlier clustrenrich() function. difference input_genes argument created take list genes. First, need extract lonely genes: , can conduct enrichment: information argument function, run ?cluefish::simplenrich(). output named list two components: dr_g_a: dataframe type g_a holding simple enrichment results gostres: named list original result output g:GOst dr_g_a: dataframe type g_a holding simple enrichment results dr_a: dataframe type holding simple enrichment params: list main parameters used can take look filtered results, row corresponding enriched term :","code":"lonelycluster_data <- lonely_fishres$dr_t_c_a_fishing |>    dplyr::filter(new_clustr == \"Lonely\") lonely_clustr_analysis_res <- simplenrich(   input_genes = lonelycluster_data$gene_id,   bg_genes = bg_t_ids$gene_id,   bg_type = \"custom_annotated\",   sources = c(\"GO:BP\", \"KEGG\", \"WP\"),    organism = \"drerio\",   user_threshold = 0.05,   correction_method = \"fdr\",   only_highlighted_GO = TRUE,   min_term_size = 5,   max_term_size = 500,   ngenes_enrich_filtr = 3,   path = \"your/chosen/path\",   output_filename = \"filename.rds\",   overwrite = FALSE ) dplyr::glimpse(lonely_clustr_analysis_res$filtered$dr_a) #> Rows: 12 #> Columns: 17 #> $ query                 <chr> \"query_1\", \"query_1\", \"query_1\", \"query_1\", \"que‚Ä¶ #> $ significant           <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, ‚Ä¶ #> $ p_value               <dbl> 2.09e-13, 1.12e-06, 1.06e-02, 1.26e-02, 2.98e-02‚Ä¶ #> $ term_size             <int> 70, 139, 41, 106, 15, 23, 268, 143, 72, 46, 78, ‚Ä¶ #> $ query_size            <int> 763, 763, 763, 763, 763, 763, 177, 177, 177, 177‚Ä¶ #> $ intersection_size     <int> 26, 26, 9, 15, 5, 6, 22, 14, 9, 6, 10, 6 #> $ precision             <dbl> 0.03408, 0.03408, 0.01180, 0.01966, 0.00655, 0.0‚Ä¶ #> $ recall                <dbl> 0.3714, 0.1871, 0.2195, 0.1415, 0.3333, 0.2609, ‚Ä¶ #> $ term_id               <chr> \"GO:0002088\", \"GO:0007601\", \"GO:0000041\", \"GO:00‚Ä¶ #> $ source                <chr> \"GO:BP\", \"GO:BP\", \"GO:BP\", \"GO:BP\", \"GO:BP\", \"GO‚Ä¶ #> $ term_name             <chr> \"lens development in camera-type eye\", \"visual p‚Ä¶ #> $ effective_domain_size <int> 15468, 15468, 15468, 15468, 15468, 15468, 5714, ‚Ä¶ #> $ source_order          <int> 681, 3094, 17, 13905, 1212, 13702, 280, 279, 220‚Ä¶ #> $ parents               <list> <\"GO:0043010\", \"GO:0048856\">, \"GO:0050953\", \"GO:‚Ä¶ #> $ evidence_codes        <chr> \"IMP IGI,IBA,IBA,IBA,IBA,IBA,IBA,IBA,IBA,IBA,IB‚Ä¶ #> $ intersection          <chr> \"ENSDARG00000013963,ENSDARG00000016793,ENSDARG00‚Ä¶ #> $ highlighted           <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE‚Ä¶"},{"path":[]},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"homemade-functions","dir":"Articles","previous_headings":"Outputs to explore the results","what":"Homemade functions","title":"Introduction to cluefish","text":"fully explore Cluefish results, including DR modeling metrics DRomics outputs required. results_to_csv() function generates summary .csv file Cluefish workflow results, supporting manual exploration. requires two main data inputs: lonelyfishing_data: named list output lonelyfishing() function. bmdboot_data: DRomics bmdboot dataframe results DRomics::bmdboot() following additional step DRomics::bmdfilter(). data include deregulated transcript identifiers Step 2. information argument function, run ?cluefish::results_to_csv(). Cluefish also leverages DRomics visualization functions, like DRomics::curvesplot(), plot fitted dose-response curves. curves_to_pdf() function generates .pdf fitted curves cluster‚Äôs gene set, offering visual insight cluster composition. requires five main inputs: lonelyfishing_data: named list output lonelyfishing() function. bmdboot_data: DRomics bmdboot dataframe results DRomics::bmdboot() following additional step DRomics::bmdfilter(). must correspond data loaded containing deregulated transcript identifiers Step 2. clustrfusion_data: named list output clustrfusion() function. tested_doses: vector tested doses can found output DRomics::drcfit() function unique(f$omicdata$dose). annot_order: vector specifying prioritized order annotation sources used clustrenrich() function. annot_order specifies preferred order annotation sources assigning primary descriptor cluster. enriched function found first source listed, function used primary descriptor cluster. order allows prioritize annotation databases based relevance quality information provide study. information argument function, run ?cluefish::curves_to_pdf(). information argument DRomics::curvesplot(), run ?DRomics::curvesplot().","code":"results_to_csv(  lonelyfishing_data = lonely_fishres,  bmdboot_data = b_definedCI,  path = \"your/chosen/path\",  output_filename = \"filename.csv\",  overwrite = TRUE ) curves_to_pdf(  lonelyfishing_data = lonely_fishres,  bmdboot_data = b_definedCI,   clustrfusion_data = clustr_fusionres,  tested_doses = unique(f$omicdata$dose),   annot_order = c(\"GO:BP\", \"KEGG\", \"WP\"),  colorby = \"trend\",  addBMD = TRUE,  scaling = TRUE,  npoints= 100,  free.y.scales = FALSE,  xmin = 0.1,   xmax = 100,   dose_log_transfo = TRUE,   line.size = 0.7,   line.alpha = 0.4,   point.size = 2,   point.alpha = 0.4,  xunit = \"¬µg/L\",  xtitle = \"Dose (¬µg/L)\",  ytitle = \"Signal\",  colors = c(\"inc\" = \"#1B9E77\", \"dec\" = \"#D95F02\", \"U\" = \"#7570B3\", \"bell\" = \"#E7298A\"),  path = paste0(\"outputs/\", file_date, \"/\"),  output_filename = paste0(\"workflow_curvesplots_\", file_date, \".pdf\"),  overwrite = TRUE )"},{"path":"https://ellfran-7.github.io/cluefish/articles/cluefish.html","id":"quarto-report-templates","dir":"Articles","previous_headings":"Outputs to explore the results","what":"Quarto report templates","title":"Introduction to cluefish","text":"Cluefish compendium includes Quarto report templates can streamline summarization Cluefish results, enhancing interpretability ease use. reports auto-generated can customized needed. available templates include: report_workflow_results.qmd report summarizes key findings DRomics analysis workflow results. includes visual summaries like BMD plots per cluster interactive visualizations using plotly R package, helping prioritize results explore cluster. report_lonely_results.qmd report focuses Lonely cluster, summarizing results genes associate clusters. includes plotly interactive DRomics plots like BMD distributions, trend-colored fitted curves, ECDF plots detailed exploration. report_comparison_results report compares Cluefish standard workflow (simplenrich()). script available perform standard approach script can found analyses folder, name: standard-pipeline. generate reports, use custom render_qmd() function, builds quarto::quarto_render() allows output designated directory. supports quarto::quarto_render() arguments. Important: adaptations may needed directory paths, file naming, settings.","code":""},{"path":[]},{"path":"https://ellfran-7.github.io/cluefish/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ellis Franklin. Author, maintainer, copyright holder.","code":""},{"path":"https://ellfran-7.github.io/cluefish/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Franklin E (2024). cluefish: Fishing Clues Depths Transcriptomic Data Series. R package version 0.0.0, https://ellfran-7.github.io/cluefish/, https://github.com/ellfran-7/cluefish.","code":"@Manual{,   title = {cluefish: Fishing for Clues in the Depths of Transcriptomic Data Series},   author = {Ellis Franklin},   year = {2024},   note = {R package version 0.0.0, https://ellfran-7.github.io/cluefish/},   url = {https://github.com/ellfran-7/cluefish}, }"},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"cluefish-","dir":"","previous_headings":"","what":"Fishing for Clues in the Depths of Transcriptomic Data Series","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"Overview Installation Usage Required inputs Recommended Selection Method Contributing License Contact Acknowledgments","code":""},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"Cluefish free open-source, semi-automated R workflow designed comprehensive untargeted exploration transcriptomic data series. name reflects three key concepts driving workflow: Clustering, Enrichment, Fishing‚Äîmetaphorically aligned ‚Äúfishing clues‚Äùüé£ complex biological data. used alongside DRomics (Dose-Response Omics) R package, Cluefish provides comprehensive analysis dose-response transcriptomic data. toxicology/ecotoxicology, support understanding/highlighting contaminant‚Äôs mode action. workflow addresses limitations standard -Representation Analysis (ORA) applying ORA pre-clustered networks. clusters serve anchors ORA, enhancing enrichment detection sensitivity thus enabling identification smaller, specific biological processes simultaneously forming exploratory gene groups. Cluefish designed adaptable wide range organisms, model non-model, ensuring broad applicability across various biological contexts.  (back top)","code":""},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"Cluefish tool developed R, R installed prerequisite. can download . enhanced experience, recommend using RStudio integrated development environment (IDE), available download link, . can use Cluefish locally one two ways: Clone repository via terminal: Install developmental version Cluefish GitHub R (remotes needed):  (back top)","code":"git clone https://github.com/ellfran-7/cluefish.git if (!requireNamespace(\"remotes\", quietly = TRUE))   install.packages(\"remotes\")  remotes::install_github(\"ellfran-7/cluefish\")"},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"additional-requirements","dir":"","previous_headings":"","what":"Additional Requirements","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"Cluefish relies external open source software intermediate step within workflow. Please ensure following tools installed: Cytoscape: Cluefish uses Cytoscape order visualize PPI networks. Install Cytoscape download page. Required Cytoscape Apps: Within Cytoscape, install StringApp clusterMaker2 apps. : Open Cytoscape Navigate Apps > App Store > Show App Store Search install ‚ÄúStringApp‚Äù (retrieving STRING protein interactions) ‚ÄúclusterMaker2‚Äù‚Äù (clustering network data). can also view apps Cytoscape App Store.  (back top)","code":""},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"run Cluefish workflow, can use make.R script, serves ‚Äòmaster‚Äô script entire process. recommend using script template ensure smooth sequential execution workflow steps. step--step workflow guide also available vignette, Introduction Cluefish (add link), includes ZebrafishDBP example dataset.","code":""},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"required-r-packages","dir":"","previous_headings":"Usage","what":"Required R packages","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"key feature Cluefish integration renv create reproducible environments. allows install required R packages two ways: Run renv::install() install recent version packages listed renv.lock file. full reproducibility, run renv::restore() install exact package versions specified renv.lock file. Note process may take longer.","code":""},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"required-inputs","dir":"","previous_headings":"Usage","what":"Required inputs","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"Cluefish requires two key inputs: background transcript list: Typically, includes identifiers detected transcripts experiment. deregulated transcript list: subset background list, containing identifiers significantly deregulated transcripts. list can derived using selection method.","code":""},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"recommended-selection-method","dir":"","previous_headings":"Usage","what":"Recommended Selection Method","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"inputs can derived selection method, Cluefish optimised work seamlessly results DRomics, tool tailored dose-response modelling omics data. Although using DRomics optional, Cluefish leverages visualization functions modelling metrics provide deeper insights biological interpretation data. information DRomics, please refer documentation.  (back top)","code":""},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"schematic overview Cluefish workflow shown . full, step--step guide, refer vignette, Introduction Cluefish (add link), provides instructions using ZebrafishDBP example dataset.   (back top)","code":""},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"use Cluefish, please cite follows: {{ADD CITATION}}","code":""},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"Contributions make open source community amazing place learn, inspire, create. contributions make greatly appreciated. suggestion make better, please fork repo create pull request. can also simply open issue tag ‚Äúenhancement‚Äù. Don‚Äôt forget give project star! Thanks ! Fork Project Create Feature Branch (git checkout -b feature/AmazingIdea) Commit Changes (git commit -m 'Add AmazingIdea') Push Branch (git push origin feature/AmazingIdea) Open Pull Request  (back top)","code":""},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"Distributed CeCILL Free Software License Agreement v2.1. See LICENSE.txt information. CECILL-2.1 compatible GNU GPL. See official CeCILL site information.  (back top)","code":""},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"need yet covered, feedback Cluefish, anything question, feel free contact ! Ellis Franklin - @elffran7 - ellis.franklin@univ-lorraine.fr Project Link: https://github.com/ellfran-7/cluefish  (back top)","code":""},{"path":"https://ellfran-7.github.io/cluefish/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Fishing for Clues in the Depths of Transcriptomic Data Series","text":"Othneil Drew‚Äôs README template Malven‚Äôs Flexbox Cheatsheet Malven‚Äôs Grid Cheatsheet Img Shields  (back top)","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/clustrenrich.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-specific functional enrichment and whole annotation retrieval ‚Äî clustrenrich","title":"Cluster-specific functional enrichment and whole annotation retrieval ‚Äî clustrenrich","text":"function performs -Representation Analysis (ORA) clusters identify enriched biological functions using clustrenrich() function. leverages gprofiler2::gost() function offers customization options, including choice background gene list, background type (e.g., ‚Äúcustom‚Äù ‚Äúcustom_annotated‚Äù), database sources (e.g., GO, KEGG, WP), adjusted p-value correction methods, option exclude IEA (Electronically Inferred Annotations) GO terms. function adaptable various organisms biological annotation sources. Users can filter terms/pathways based gene set size (min_term_size max_term_size) number genes enriched (ngenes_enrich_filtr). example, terms fewer minimum required genes maximum allowed genes excluded, terms enriched fewer specified number genes filtered . Additionally, users can choose retain highlighted/driver GO terms reduce redundancy focus key biological functions. secondary gprofiler2::gost() run significant = FALSE retrieves annotations deregulated genes, utilized later lonelyfishing() function. Throughout process, dataframe tracks number biological functions linked cluster filtering step, categorized source. main parameters used saved output transparency reproducibility.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/clustrenrich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-specific functional enrichment and whole annotation retrieval ‚Äî clustrenrich","text":"","code":"clustrenrich(   clustrfiltr_data,   dr_genes,   bg_genes,   bg_type = \"custom_annotated\",   sources = c(\"GO:BP\", \"KEGG\", \"WP\"),   organism,   user_threshold = 0.05,   correction_method = \"fdr\",   exclude_iea = FALSE,   enrich_size_filtr = TRUE,   only_highlighted_GO = TRUE,   min_term_size = NULL,   max_term_size = NULL,   ngenes_enrich_filtr = NULL,   path,   output_filename,   overwrite = FALSE )"},{"path":"https://ellfran-7.github.io/cluefish/reference/clustrenrich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-specific functional enrichment and whole annotation retrieval ‚Äî clustrenrich","text":"clustrfiltr_data named list output clustrfiltr() function. dr_genes character vector deregulated genes can correspond gene_id column output getids()  getregs()  function. gprofiler2::gost() function handles mixed types gene IDs even duplicates treating single unique occurrence identifier, disregarding duplication. bg_genes character vector background  genes (preferably experiment) typically corresponds gene_id column output getids() function. bg_type background type, .e. statistical domain, can one \"annotated\", \"known\", \"custom\" \"custom_annotated\" sources vector data sources use. Currently, set GO:BP, KEGG WP. organism Organism ID defined chosen sources (e.g. zebrafish = \"drerio\") user_threshold Adjusted p-value cutoff -Representation analysis (default 0.05 gost() function) correction_method P-value adjustment method: one ‚ÄúgSCS‚Äù ,‚Äúfdr‚Äù ‚Äúbonferroni (default set \"fdr\") exclude_iea Option exclude GO electronic annotations (IEA) only_highlighted_GO Whether retain highlighted driver GO terms results. Default set TRUE. min_term_size Minimum size gene sets included analysis. NULL (default), filtering size applied. max_term_size Maximum size gene sets included analysis. NULL (default), filtering size applied. ngenes_enrich_filtr Minimum number genes cluster needed gene set considered enriched. NULL (default), filtering gene count applied. path Destination folder output data results. output_filename Output enrichment result filename. overwrite TRUE, function overwrites existing output files; otherwise, reads existing file. (default set FALSE).","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/clustrenrich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-specific functional enrichment and whole annotation retrieval ‚Äî clustrenrich","text":"named list holding 4 components, : -dr_g_a_enrich dataframe type g_a holding enrichment results row combination gene biological function annotation -gostres named list 'result' contains data frame enrichment analysis results, 'meta' contains metadata necessary creating Manhattan plot. original output gprofiler2::gost() -dr_g_a_whole dataframe type g_a holding biological function annotations found g:profiler database deregulated genes. -c_simplifylog dataframe tracing number biological functions enriched per cluster filtering step source -params list main parameters used","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/clustrfiltr.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter clusters based on their gene-set size ‚Äî clustrfiltr","title":"Filter clusters based on their gene-set size ‚Äî clustrfiltr","text":"function filters clusters based size, selecting genes belong clusters meeting user-defined size criteria.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/clustrfiltr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter clusters based on their gene-set size ‚Äî clustrfiltr","text":"","code":"clustrfiltr(getclustrs_data, size_filtr = 3)"},{"path":"https://ellfran-7.github.io/cluefish/reference/clustrfiltr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter clusters based on their gene-set size ‚Äî clustrfiltr","text":"getclustrs_data dataframe type t typically corresponds output getclustrs() function. input holds least columns named gene_id clustr respectively holding Ensembl gene cluster identifiers deregulated genes. size_filtr minimum number genes required cluster retained (default: 3).","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/clustrfiltr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter clusters based on their gene-set size ‚Äî clustrfiltr","text":"named list holding 2 components, : - kept dataframe type t similar getclustrs_data dataframe input rows kept filter (genes part cluster equal size limit) -removed dataframe type t similar getclustrs_data dataframe input rows removed filter (genes part clusters size limit) - params list main parameters used","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/clustrfusion.html","id":null,"dir":"Reference","previous_headings":"","what":"Fusion of clusters based on shared cluster enrichment ‚Äî clustrfusion","title":"Fusion of clusters based on shared cluster enrichment ‚Äî clustrfusion","text":"function fusions clusters share biological function enrichment -least one sources used (e.g. GO, KEGG...).","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/clustrfusion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fusion of clusters based on shared cluster enrichment ‚Äî clustrfusion","text":"","code":"clustrfusion(clustrenrich_data, monoterm_fusion = FALSE)"},{"path":"https://ellfran-7.github.io/cluefish/reference/clustrfusion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fusion of clusters based on shared cluster enrichment ‚Äî clustrfusion","text":"clustrenrich_data named list output clustrenrich() function. monoterm_fusion Option merge clusters either enrich total terms (monoterm_fusion = FALSE) individual term (monoterm_fusion = TRUE) least one source (default set FALSE).","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/clustrfusion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fusion of clusters based on shared cluster enrichment ‚Äî clustrfusion","text":"named list holding 4 components, : -dr_g_a_fusion dataframe type g_a holding cluster fusion results. shares similar structure clustrenrich_data$dr_g_a_enrich dataframe row combination gene biological function annotation. -dr_c_a_fusion dataframe type c_a holding cluster fusion results row combination cluster ID biological function annotation -c_fusionlog dataframe tracing cluster fusion events, indicating sources originated (e.g. GO, KEGG). -params list main parameters used; case monoterm_fusion","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/curves_to_pdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate curvesplots per-cluster to PDF ‚Äî curves_to_pdf","title":"Generate curvesplots per-cluster to PDF ‚Äî curves_to_pdf","text":"function generates PDF file featuring dose-response curves cluster deregulated genes. plot labeled cluster ID number transcripts cluster. default, curves color-coded indicate whether trend increasing, decreasing, U-shaped, bell-shaped. Users can also apply modifications available original DRomics::curvesplot() function.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/curves_to_pdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate curvesplots per-cluster to PDF ‚Äî curves_to_pdf","text":"","code":"curves_to_pdf(   lonelyfishing_data,   bmdboot_data,   clustrfusion_data,   id_col_for_curves = \"id\",   tested_doses,   annot_order,   ...,   xunit,   xtitle,   ytitle,   colors = c(inc = \"#1B9E77\", dec = \"#D95F02\", U = \"#7570B3\", bell = \"#E7298A\"),   path,   output_filename,   overwrite = TRUE )"},{"path":"https://ellfran-7.github.io/cluefish/reference/curves_to_pdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate curvesplots per-cluster to PDF ‚Äî curves_to_pdf","text":"lonelyfishing_data named list output lonelyfishing() function. bmdboot_data DRomics bmdboot dataframe results DRomics::bmdfilter() clustrfusion_data named list output clustrfusion() function. id_col_for_curves column giving identification curve (default \"id\") tested_doses vector tested doses can found output DRomics::drcfit()function (unique(f$omicdata$dose)) annot_order vector specifying prioritized order annotation sources used clustrenrich() function. order determines term pathway used primary descriptor cluster. relevance source can based quantity quality information provide, tailored specific case study. example, Danio rerio, might prioritize sources like c(\"GO:BP\", \"KEGG\", \"WP\") based abundance information offer. ... Additional arguments passed DRomics::curvesplot() function xunit Unit x scale xtitle X-axis title ytitle Y-axis title colors vector colors different trends (default set c(\"inc\" = \"#1B9E77\", \"dec\" = \"#D95F02\", \"U\" = \"#7570B3\", \"bell\" = \"#E7298A\")) path Destination folder output data results. output_filename Output PDF filename. overwrite TRUE, function overwrites existing output files; otherwise, reads existing file. (default set FALSE).","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/curves_to_pdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate curvesplots per-cluster to PDF ‚Äî curves_to_pdf","text":"return value; .pdf file downloaded stored specified director. holds curvesplot per slide cluster, Friendly (created), Lonely deregulated gene transcripts.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/dl_regulation_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download transcription factors and co-factors data from AnimalTFDB ‚Äî dl_regulation_data","title":"Download transcription factors and co-factors data from AnimalTFDB ‚Äî dl_regulation_data","text":"function downloads transcription factor cofactor data AnimalTFDB4 database. downloaded files saved .txt files specified directory. files already exist locally overwrite set TRUE, function download . files stored data/derived-data/ folder, created necessary.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/dl_regulation_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download transcription factors and co-factors data from AnimalTFDB ‚Äî dl_regulation_data","text":"","code":"dl_regulation_data(   url_tf,   url_cof,   path,   filename_tf,   filename_cof,   overwrite = FALSE )"},{"path":"https://ellfran-7.github.io/cluefish/reference/dl_regulation_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download transcription factors and co-factors data from AnimalTFDB ‚Äî dl_regulation_data","text":"url_tf URL transcription factor data. url_cof URL transcription co-factor data. path directory saving downloaded files. filename_tf name associated downloaded transcription factor file. filename_cof name associated downloaded co-factor factor file. overwrite TRUE, function overwrites existing output files; otherwise, reads existing file. (default set FALSE).","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/dl_regulation_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download transcription factors and co-factors data from AnimalTFDB ‚Äî dl_regulation_data","text":"return value; files downloaded stored specified directory.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/getclustrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Retreive and integrate the clustered Protein-Protein Interaction Network (PPIN) data ‚Äî getclustrs","title":"Retreive and integrate the clustered Protein-Protein Interaction Network (PPIN) data ‚Äî getclustrs","text":"function retrieves reformats clustered PPIN data StringApp Cytoscape.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/getclustrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retreive and integrate the clustered Protein-Protein Interaction Network (PPIN) data ‚Äî getclustrs","text":"","code":"getclustrs(gene_data, colname_for_merge, path, nodetable_filename)"},{"path":"https://ellfran-7.github.io/cluefish/reference/getclustrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retreive and integrate the clustered Protein-Protein Interaction Network (PPIN) data ‚Äî getclustrs","text":"gene_data dataframe type t typically corresponds output getids() getregs() function. input holds least one column named \"gene_id‚Äù holding gene identifiers deregulated genes. colname_for_merge identifier column used query order create PPIN Cytoscape using StringApp (e.g. \"ensembl_gene_id\" \"uniprotsptrembl\") path Folder nodetable exported Cytoscape found nodetable_filename Filename nodetable","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/getclustrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retreive and integrate the clustered Protein-Protein Interaction Network (PPIN) data ‚Äî getclustrs","text":"dataframe type t similar gene_data dataframe input added column indicating cluster belongs gene (cluster associated : NA)","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/getids.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve gene identifiers from Ensembl/Ensembl Genomes ‚Äî getids","title":"Retrieve gene identifiers from Ensembl/Ensembl Genomes ‚Äî getids","text":"function connects Ensembl Ensembl Metazoa database, queries specified species dataset using biomaRt package, returns results query. query includes 'external_gene_name' attribute, representing readable gene symbols, function examines whether duplicates identifier exist across various Ensembl transcript gene IDs rows. situation occurs gene symbol corresponds different Ensembl gene IDs Ensembl transcript IDs. duplicates detected, function modifies external gene name address discrepancy.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/getids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve gene identifiers from Ensembl/Ensembl Genomes ‚Äî getids","text":"","code":"getids(   id_query,   biomart_db,   species_dataset,   version = NULL,   transcript_id,   gene_id,   gene_name = NULL,   other_ids = NULL )"},{"path":"https://ellfran-7.github.io/cluefish/reference/getids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve gene identifiers from Ensembl/Ensembl Genomes ‚Äî getids","text":"id_query vector transcript IDs typically corresponds background transcript list biomart_db name BioMart database hosted Ensembl Ensembl Metazoa. Use listMarts() view available Ensembl databases, listEnsemblGenomes() view available Ensembl Metazoa databases. species_dataset name species dataset desired ensembl.org. version Ensembl version connect wanting connect archived Ensembl version transcript_id transcript identifier deregulated transcripts used query (e.g., \"ensembl_transcript_id_version\") gene_id gene identifier retrieved BioMart dataset specified species (preferably \"ensembl_gene_id\"  identifier used g:profiler) gene_name human-readable gene name identifier retrieved BioMart dataset specified species. other_ids One additional identifiers attributes retrieve BioMart dataset specified species (e.g., \"external_gene_name\", \"uniprotsptrembl\", \"string\"). Ensure retrieved identifier supported organism STRING database subsequent analysis.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/getids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve gene identifiers from Ensembl/Ensembl Genomes ‚Äî getids","text":"dataframe type t containing biomaRt query results modified \"external_gene_name\" column present duplicates exist.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/getregs.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the regulatory status of deregulated genes ‚Äî getregs","title":"Retrieve the regulatory status of deregulated genes ‚Äî getregs","text":"function retrieves information regulatory status genes using files downloaded dl_regulation_data() function.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/getregs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the regulatory status of deregulated genes ‚Äî getregs","text":"","code":"getregs(getids_data, regulator_file, coregulator_file)"},{"path":"https://ellfran-7.github.io/cluefish/reference/getregs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the regulatory status of deregulated genes ‚Äî getregs","text":"getids_data dataframe type t typically corresponds output getids() function. input holds least one column named \"gene_id\" holding gene identifiers deregulated genes.  subset output getids() function significantly deregulated transcripts rows transcript/gene identifiers columns. regulator_file previously downloaded .txt Transcription Factor file AnimalTFDB4 database (https://guolab.wchscu.cn/AnimalTFDB4/#/). coregulator_file previously downloaded .txt Transcription Co-Factor file AnimalTFDB4 database (https://guolab.wchscu.cn/AnimalTFDB4/#/).","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/getregs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the regulatory status of deregulated genes ‚Äî getregs","text":"dataframe type t similar getids_data input added column indicating (co-)regulator status transcript's deregulated gene.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/lonelyfishing.html","id":null,"dir":"Reference","previous_headings":"","what":"Fishing of lonely genes sharing annotations with existing clusters ‚Äî lonelyfishing","title":"Fishing of lonely genes sharing annotations with existing clusters ‚Äî lonelyfishing","text":"function expands gene clusters incorporating \"lonely\" genes‚Äîinitially assigned cluster. identifies lonely genes integrates existing clusters based shared biological function annotations enrichments observed clusters. integration uses annotations sources like GO, KEGG, WikiPathways, focusing terms found $dr_g_a_fusion dataframe clustrfusion() output. function introduces concept \"Friendly\" genes, allowing users set friendly_limit determines maximum number clusters gene can part . Genes exceeding limit reassigned \"Lonely\" cluster, \"friendliness\" column created show number clusters gene participates .","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/lonelyfishing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fishing of lonely genes sharing annotations with existing clusters ‚Äî lonelyfishing","text":"","code":"lonelyfishing(   dr_data,   clustrenrich_data,   clustrfusion_data,   friendly_limit = 0,   path,   output_filename,   overwrite = FALSE )"},{"path":"https://ellfran-7.github.io/cluefish/reference/lonelyfishing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fishing of lonely genes sharing annotations with existing clusters ‚Äî lonelyfishing","text":"dr_data dataframe type t typically corresponds output getids()getregs(). input holds least gene_id' 'term_name' columns, respectively containing Ensembl gene identifiers biological function annotations deregulated genes. Recommended hold also 'transcript_id' futur functions. clustrenrich_data named list output clustrenrich() function. clustrfusion_data named list output clustrfusion() function. friendly_limit maximum number clusters gene can part considered \"Friendly\". Genes exceeding limit assigned separate \"Friendly\" cluster. limit set 0, \"Friendly\" cluster created (default set 0) path Destination folder output data results. output_filename Output lonelyfishing result filename. overwrite TRUE, function overwrites existing output files; otherwise, reads existing file. (default set FALSE).","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/lonelyfishing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fishing of lonely genes sharing annotations with existing clusters ‚Äî lonelyfishing","text":"named list holding 3 components, : -dr_t_c_a_fishing dataframe type t_c_a holding lonely fishing results. -dr_c_a_fishing dataframe type c_a holding lonely fishing results. shares similar structure clustrfusion_data$dr_c_a_fusion dataframe row combination cluster ID biological function annotation. -params list main parameters used; case friendly_limit","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/render_qmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Render and Move Quarto Documents ‚Äî render_qmd","title":"Render and Move Quarto Documents ‚Äî render_qmd","text":"function renders Quarto .qmd document specified output format moves resulting file designated output path. uses quarto::quarto_render perform rendering fs::file_move handle file movement.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/render_qmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render and Move Quarto Documents ‚Äî render_qmd","text":"","code":"render_qmd(input_file, output_file, output_path, file_ext, ...)"},{"path":"https://ellfran-7.github.io/cluefish/reference/render_qmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render and Move Quarto Documents ‚Äî render_qmd","text":"input_file character string specifying path input Quarto .qmd file. output_path character string specifying directory rendered file moved. ... Additional arguments passed quarto::quarto_render.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/render_qmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render and Move Quarto Documents ‚Äî render_qmd","text":"function return value. performs rendering file moving operations, displays message indicating file movement.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/results_to_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a workflow summary CSV file ‚Äî results_to_csv","title":"Generate a workflow summary CSV file ‚Äî results_to_csv","text":"function creates concise summary table capturing key details derived workflow results lonelyfishing() function. formatted row combination transcript, cluster biological function annotation.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/results_to_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a workflow summary CSV file ‚Äî results_to_csv","text":"","code":"results_to_csv(   lonelyfishing_data,   bmdboot_data,   path,   output_filename,   overwrite = TRUE )"},{"path":"https://ellfran-7.github.io/cluefish/reference/results_to_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a workflow summary CSV file ‚Äî results_to_csv","text":"lonelyfishing_data named list output lonelyfishing() function. bmdboot_data DRomics bmdboot dataframe results DRomics::bmdfilter() path Destination folder output data results. output_filename Output CSV filename. overwrite TRUE, function overwrites existing output files; otherwise, reads existing file. (default set FALSE).","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/results_to_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a workflow summary CSV file ‚Äî results_to_csv","text":"return value; .csv file downloaded stored specified director. holds results final step workflow row combination transcript, gene identifiers, cluster biological function annotation. used support exploration mechanism discovery.","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/simplenrich.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple functional enrichment with added filtering ‚Äî simplenrich","title":"Simple functional enrichment with added filtering ‚Äî simplenrich","text":"function utilizes gprofiler2::gost() perform standard functional enrichment analysis list genes interest. incorporates filters similar cluefish workflow, enabling users set limits gene set sizes (lower upper), specify minimum number genes involved enrichment, restrict results driver GO terms requested. function provides flexibility applying filters features cluefish workflow. output includes unfiltered filtered enrichment results, available two formats: combination gene annotation per row, annotation per row .","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/simplenrich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple functional enrichment with added filtering ‚Äî simplenrich","text":"","code":"simplenrich(   input_genes,   bg_genes,   bg_type = \"custom_annotated\",   sources = c(\"GO:BP\", \"KEGG\", \"WP\"),   organism,   user_threshold = 0.05,   correction_method = \"fdr\",   exclude_iea = FALSE,   only_highlighted_GO = TRUE,   min_term_size = NULL,   max_term_size = NULL,   ngenes_enrich_filtr = NULL,   path,   output_filename,   overwrite = FALSE )"},{"path":"https://ellfran-7.github.io/cluefish/reference/simplenrich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple functional enrichment with added filtering ‚Äî simplenrich","text":"input_genes character vector genes interest. gprofiler2::gost() function handles mixed types gene IDs even duplicates treating single unique occurrence identifier, disregarding duplication. bg_genes vector background Ensembl genes (preferably experiment). bg_type background type, .e. statistical domain, can one \"annotated\", \"known\", \"custom\" \"custom_annotated\" sources vector data sources use. Currently, set GO:BP, KEGG WP. organism Organism ID defined chosen sources (e.g. zebrafish = \"drerio\") user_threshold Adjusted p-value cutoff -Representation analysis (default 0.05 gost() function) correction_method P-value adjustment method: one ‚ÄúgSCS‚Äù ,‚Äúfdr‚Äù ‚Äúbonferroni (default set \"fdr\") exclude_iea Option exclude GO electronic annotations (IEA) only_highlighted_GO Whether retain highlighted driver GO terms results. Default set TRUE. min_term_size Minimum size gene sets included analysis. NULL (default), filtering size applied. max_term_size Maximum size gene sets included analysis. NULL (default), filtering size applied. ngenes_enrich_filtr Minimum number genes  input gene list needed gene set considered enriched. NULL (default), filtering gene count applied. path Destination folder output data results. output_filename Output enrichment result filename. overwrite TRUE, function overwrites existing output files; otherwise, reads existing file. (default set FALSE).","code":""},{"path":"https://ellfran-7.github.io/cluefish/reference/simplenrich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple functional enrichment with added filtering ‚Äî simplenrich","text":"named list holding two components: -unfiltered named list holding two sub-components:: - dr_g_a dataframe type g_a holding unfiltered enrichment results (e.g. GO terms, limits set gene set size ) - gostres named list 'result' contains data frame enrichment analysis results, 'meta' contains metadata necessary creating Manhattan plot. original output gprofiler2::gost(). -filtered named list holding two sub-components: - dr_g_a dataframe type g_a holding filtered enrichment results. - dr_a dataframe type holding filtered enrichment results. -params list main parameters used","code":""}]
