---
title: "Report of the lonely cluster results"
author: "Ellis Franklin"
date: last-modified
date-format: iso 
theme: "flatly"
highlight-style: "breeze"
toc: true
number-sections: true
number-depth: 2
format: 
  html: 
    embed-resources: true
    self-contained: true
    grid: 
      margin-width: 200px
      sidebar-width: 100px
execute: 
  warning: false
reference-location: margin
citation-location: margin
editor: visual
cap-location: margin
params:
  file-date: "2024-07-07"
output-file: "report_lonely_results_2024-07-07.html"
---

```{r}
#| label: load-fun-data
#| include: false

### Load everything : from packages to functions to data ---------

knitr::opts_chunk$set(warning = F, message = F)
options(scipen = 1, digits = 2) 

## Packages required ---------
require(ggplot2)
require(kableExtra)
require(DT)

### Load Project Addins (R Functions and Packages) ------
devtools::load_all(here::here())

## Load DRomics drcfit object (which holds the background transcript list) 
f <- readRDS(file = here::here("data", "raw-data", "fitres_zebrafish_phtalate.rds"))
## Load DRomics bmdboot object
b <- readRDS(file = here::here("data", "raw-data", "bootres_zebrafish_phtalate_UF_seed3_5000iter.rds"))

## We filter the bmdboot result by selecting only transcripts with a defined confidence interval around the BMD
BMDres_definedCI <- DRomics::bmdfilter(b$res, BMDfilter = "definedCI")

## Retrieve the background identifiers
bg_t_ids <- read.table(here::here("outputs", params$`file-date`, paste0("bg_t_ids_", params$`file-date`, ".txt")))

## Retrieve the clustr_enrichres 
clustr_enrichres <- readRDS(here::here("outputs", params$`file-date`, paste0("clustr_enrichres_", params$`file-date`, ".rds")))

## Retrieve the  clustr_fusionres
clustr_fusionres <- clustrfusion(
  clustrenrich_data = clustr_enrichres
)

## Load the lonely fishing results 
lonelyfishing_data <- readRDS(here::here("outputs", params$`file-date`, paste0("lonely_fishres_", params$`file-date`, ".rds")))

# Modify the "transcript_id" column to "id" for easier merge and integration to DRomics visualisations
names(lonelyfishing_data$dr_t_c_a_fishing)[names(lonelyfishing_data$dr_t_c_a_fishing) == "transcript_id"] <- "id"

# Combine DRomics info and the workflow info
b_lonely_fishres <- merge(lonelyfishing_data$dr_t_c_a_fishing, BMDres_definedCI,  by = "id")

# Only select the lonely cluster
b_only_lonely_fishres <- b_lonely_fishres |> 
  dplyr::filter(new_clustr == "Lonely")

# Load the lonely cluster functional enrichment results
lonely_cluster_analysis_res <- readRDS(here::here("outputs",  params$`file-date`, paste0("lonely_clustr_analysis_res_", params$`file-date`, ".rds")))

```

## Introduction

This document is a comprehensive report, meticulously encapsulating the pivotal results derived from the DRomics analysis while detailing the workflow. It succinctly summarizes the impacts and outputs of each significant step within the pipeline, supported by visual representations like plots depicting the summary of BMD values per cluster, aiding in prioritization. Moreover, additional specific visualizations for each cluster, such as plots of fitted curves, empirical cumulative distribution function (ECDF) plots of BMD values, and summary tables, enable a more focused exploration.

This document serves as a supplementary report to the workflow_results_report, focusing on the Lonely cluster. The Lonely cluster comprises genes that remain unassociated with any other cluster throughout the workflow process.

The lonely cluster is composed of a total of `r length(unique(b_only_lonely_fishres$id))`.

Functional enrichment analysis is conducted to link the cluster with biological processes, facilitating deeper exploration of aspects potentially overlooked in the analysis.

## The Lonely cluster as an interactive table

::: fullwidth
```{r}
#| label: tbl-workflow
#| tbl-cap: "Summary table of the lonely cluster"
#| tbl-cap-location: top
#| echo: false

# Prepare the structure for the summary dataframe
b_only_lonely_fishres_summary <- data.frame(
  transcript_id = b_only_lonely_fishres$id,
  gene_id = b_only_lonely_fishres$gene_id,
  gene_name = b_only_lonely_fishres$gene_name,
  NewCluster = b_only_lonely_fishres$new_clustr,
  Friendliness = b_only_lonely_fishres$friendliness,
  Term_name = b_only_lonely_fishres$term_name,
  Source = b_only_lonely_fishres$source,
  TF = b_only_lonely_fishres$TF,
  BMD.zSD = as.numeric(b_only_lonely_fishres$BMD.zSD),
  Trend = b_only_lonely_fishres$trend
  )

# Round BMD.zSD to the tenth for easier reading
b_only_lonely_fishres_summary$BMD.zSD <- round(b_only_lonely_fishres_summary$BMD.zSD, 1) 

# Remove repeated rows
b_only_lonely_fishres_summary <- unique(b_only_lonely_fishres_summary)

# Generate the interactive table 
b_only_lonely_fishres_summary |> 
  DT::datatable(options = list(pageLength = 10), class = c("compact", "hover", "row-border", "order-column")) |> 
  DT::formatStyle(columns = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), fontSize = '80%')
```
:::

 

```{r}
#| echo: false

# Switch the "id" column from "transcript_id" content to "gene_name" content for visualizing the gene symbols

names(b_only_lonely_fishres)[names(b_only_lonely_fishres) == "id"] <- "transcript_id"

names(b_only_lonely_fishres)[names(b_only_lonely_fishres) == "gene_name"] <- "id"

```

## Characterizing the Lonely cluster by functional enrichment

| Source | Query size                                                                                                                     | Background size                                                                                                                           |
|-------------------|------------------------|-----------------------------|
| GO:BP  | `r unique(lonely_cluster_analysis_res$filtered$dr_a[lonely_cluster_analysis_res$filtered$dr_a$source == "GO:BP",]$query_size)` | `r unique(lonely_cluster_analysis_res$filtered$dr_a[lonely_cluster_analysis_res$filtered$dr_a$source == "GO:BP",]$effective_domain_size)` |
| KEGG   | `r unique(lonely_cluster_analysis_res$filtered$dr_a[lonely_cluster_analysis_res$filtered$dr_a$source == "KEGG",]$query_size)`  | `r unique(lonely_cluster_analysis_res$filtered$dr_a[lonely_cluster_analysis_res$filtered$dr_a$source == "KEGG",]$effective_domain_size)`  |
| WP     | `r unique(lonely_cluster_analysis_res$filtered$dr_a[lonely_cluster_analysis_res$filtered$dr_a$source == "WP",]$query_size)`    | `r unique(lonely_cluster_analysis_res$filtered$dr_a[lonely_cluster_analysis_res$filtered$dr_a$source == "WP",]$effective_domain_size)`    |

: Number of genes involved in the query and background of the ORA {#tbl-loenrich .bordered .light}

```{r}
#| label: inter-table
#| echo: false

# Generate the interactive table 
lonely_cluster_analysis_res$filtered$dr_a |> 
  dplyr::select(term_name, term_id, source, term_size, 
                intersection_size, query_size, effective_domain_size, 
                p_value, precision, recall, highlighted) |> 
  DT::datatable(options = list(pageLength = 10)) |> 
  DT::formatStyle(columns = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), fontSize = '80%')

```

 

## The results as an interactive curvesplot

> **Cluster Lonely - `r length(unique(b_only_lonely_fishres$transcript_id))` transcripts**

::: panel-tabset
#### Curvesplot colored by trend

```{r}
#| label: fig-curvesplot1
#| fig-cap: "DR curves for the Lonely cluster colored by trend"
#| echo: false
#| message: false
#| fig-align: "center"
#| fig-asp: 0.618

# Create a curvesplot of cluster transcripts with 'cluster' identification and 'transcript count' in title
cp <- DRomics::curvesplot(
  b_only_lonely_fishres, 
  addBMD = TRUE, 
  scaling = TRUE, 
  colorby = "trend",
  npoints= 100, 
  free.y.scales = FALSE,
  xmin = 0.01, 
  xmax = 100,
  dose_log_transfo = TRUE,
  line.size = 0.5,
  line.alpha = 0.4,
  point.size = 1.5,
  point.alpha = 0.4) +
  geom_vline(xintercept = unique(f$omicdata$dose), linetype = 2, colour = "#363636", alpha = 0.7, linewidth = 0.3) +
  xlab("Dose (µg/L)") + ylab("Signal")+
  scale_color_manual(values = c("inc" = "#1B9E77", "dec" = "#D95F02", "U" = "#7570B3", "bell" = "#E7298A")) +
  theme_light()

plotly::ggplotly(cp, tooltip = c("x", "id"))

```

#### BMDplot colored by trend

```{r}
#| label: fig-bmdplot1
#| fig-cap: "BMDplot for the Lonely cluster colored by enriched term"
#| echo: false
#| message: false
#| fig-align: "center"
#| fig-asp: 0.618

# For the bmdplots, we need to remove redundancy of rows : 

b_only_lonely_fishres_no_redund <- b_only_lonely_fishres |> 
  dplyr::select(-c(gene_id,
                transcript_id,
                TF,
                old_clustr,
                friendliness,
                term_name,
                term_id,
                source)) |> 
  dplyr::distinct()

# Create a BMDplot of cluster transcripts

bp <- DRomics::bmdplot(
  b_only_lonely_fishres_no_redund, 
  add.CI = TRUE,
  colorby = "trend",
  point.size = 2,
  point.alpha = 1,
  line.size = 0.4,
  line.alpha = 0.7,
  add.label = TRUE,
  BMD_log_transfo = TRUE) +
  xlab("BMD.zSD (μg/L)") + 
  scale_colour_manual(values = c("inc" = "#1B9E77", "dec" = "#D95F02", 
                                "U" = "#7570B3", "bell" = "#E7298A")) +
  guides(shape = "none") +
  theme_light()

plotly::ggplotly(bp, tooltip = c("x", "id"))
```
:::

::: panel-tabset
## Curvesplot colored by enriched term

```{r}
#| label: fig-curvesplot2
#| fig-cap: "DR curves for all genes associated to the terms enriched by the lonely cluster"
#| echo: false
#| message: false
#| fig-align: "center"
#| fig-asp: 0.618

# Retrieve all annotations for the genes of interest
all_annots <- clustr_enrichres$dr_g_a_whole

# Retrieve the terms enriched by the lonely cluster
lonely_enriched_terms <- lonely_cluster_analysis_res$filtered$dr_a

# Filter these terms to get all the genes associated
lonely_enriched_annots <- all_annots |> 
  dplyr::filter(term_name %in% lonely_enriched_terms$term_name)

# Retrieve the differents ids associated to the genes
lonely_enriched_annots_ids <- merge(lonely_enriched_annots, bg_t_ids, by = "gene_id")

# Modify the "transcript_id" column to "id" for easier merge and integration to DRomics visualisations
names(lonely_enriched_annots_ids)[names(lonely_enriched_annots_ids) == "transcript_id"] <- "id"

# Retrieve the DRomics data for the vizualisations
b_lonely_enriched_annots_ids <- merge(lonely_enriched_annots_ids, BMDres_definedCI, by =  "id")

# Create a curvesplot of cluster transcripts with 'cluster' identification and 'transcript count' in title
cp <- DRomics::curvesplot(
  b_lonely_enriched_annots_ids, 
  addBMD = TRUE, 
  scaling = TRUE, 
  colorby = "term_name",
  npoints= 100, 
  free.y.scales = FALSE,
  xmin = 0.01, 
  xmax = 100,
  dose_log_transfo = TRUE,
  line.size = 0.5,
  line.alpha = 0.4,
  point.size = 1.5,
  point.alpha = 0.4) +
  geom_vline(xintercept = unique(f$omicdata$dose), linetype = 2, colour = "#363636", alpha = 0.7, linewidth = 0.3) +
  xlab("Dose (µg/L)") + ylab("Signal")+
  # scale_color_manual(values = c("inc" = "#1B9E77", "dec" = "#D95F02", "U" = "#7570B3", "bell" = "#E7298A")) +
  theme_light()

plotly::ggplotly(cp, tooltip = c("x", "id"))
```

## BMDplot colored by enriched term

```{r}
#| label: fig-bmdplot2
#| fig-cap: "BMDplot for all genes associated to the terms enriched by the lonely cluster"
#| echo: false
#| message: false
#| fig-align: "center"
#| fig-asp: 0.618

# For the bmdplots, we need to remove redundancy of rows : 

b_lonely_enriched_annots_ids_no_redund <- b_lonely_enriched_annots_ids |> 
  dplyr::select(-c(gene_id,
                term_id,
                source)) |> 
  dplyr::distinct()

# Create a BMDplot of cluster transcripts

bp <- DRomics::bmdplot(
  b_lonely_enriched_annots_ids_no_redund, 
  add.CI = TRUE,
  colorby = "term_name",
  point.size = 2,
  point.alpha = 1,
  line.size = 0.4,
  line.alpha = 0.7,
  add.label = TRUE,
  BMD_log_transfo = TRUE) +
  xlab("BMD.zSD (μg/L)") + 
  # scale_colour_manual(values = c("inc" = "#1B9E77", "dec" = "#D95F02", 
  #                               "U" = "#7570B3", "bell" = "#E7298A")) +
  guides(shape = "none") +
  theme_light()

plotly::ggplotly(bp, tooltip = c("x", "id"))
```
:::
