---
title: "Report comparison of standard and cluefish workflow"
author: "Ellis Franklin"
date: last-modified
date-format: iso 
theme: "flatly"
highlight-style: "breeze"
toc: true
number-sections: true
number-depth: 2
format:
  html: 
    embed-resources: true
    self-contained: true
    grid: 
      margin-width: 350px
execute: 
  warning: false
reference-location: margin
citation-location: margin
editor: visual
cap-location: margin
params:
  file-date: "2024-07-07"
output-file: "report_comparison_results_2024-07-07.html"
---

```{r}
#| label: load-fun-data
#| include: false

### Load everything : from packages to functions to data ---------

knitr::opts_chunk$set(warning = F, message = F)
options(scipen = 1, digits = 2) 

## Packages required ---------
require(ggplot2)
require(kableExtra)
require(DT)
require(gt)
require(VennDiagram)

### Load Project Addins (R Functions and Packages) ------
devtools::load_all(here::here())

## Load DRomics drcfit object (which holds the background transcript list) 
f <- readRDS(file = here::here("data", "derived-data", "fitres_zebrafish_phtalate.rds"))
## Load DRomics bmdboot object
b <- readRDS(file = here::here("data", "derived-data", "bootres_zebrafish_phtalate_UF_seed3_5000iter.rds"))

## We filter the bmdboot result by selecting only transcripts with a defined confidence interval around the BMD
BMDres_definedCI <- DRomics::bmdfilter(b$res, BMDfilter = "definedCI")

#### THE STANDARD WORKFLOW DATA

stand_res <- readRDS(here::here("outputs", params$`file-date`, paste0("standard_pipeline_res_", params$`file-date`, ".rds")))

# the unfiltered results
stand_unfiltered <- stand_res$unfiltered$gostres$result

# the filtered results
stand_filtered <- stand_res$filtered$dr_a

## Get g_a format 
dr_g_a_stand <- stand_filtered |> 
      tidyr::separate_rows(intersection, sep = ",") |> 
      dplyr::select(intersection, term_name, term_id, source) |> 
      dplyr::rename(gene_id = intersection)

#### THE cluefish workflow DATA

## Retrieve the background identifiers
bg_t_ids <- read.table(here::here("outputs", params$`file-date`, paste0("bg_t_ids_", params$`file-date`, ".txt")))

## Retrieve the deregulated identifiers
dr_t_ids <- bg_t_ids[bg_t_ids$transcript_id %in% BMDres_definedCI$id,]

## Retrieve the getclustrs() output
dr_g_string_clustr <- read.csv(here::here("outputs", params$`file-date`, "cytoscape-files", paste0("string_clusteredppin_cs09_i4_", params$`file-date`, ".csv")))

## Reformat the query term column by removing STRING identifiers from gene names (e.g., "\"ENSDARG00000042520\"" -> "ENSDARG00000042520")
dr_g_string_clustr$query.term <- stringr::str_replace_all(dr_g_string_clustr$query.term, "\"", "")
  
## Create a dataframe for seamless merge with the 'getregs_data' dataframe
dr_g_string_clustr <- data.frame(gene_id = dr_g_string_clustr$query.term, 
                                 clustr = dr_g_string_clustr$X__mclCluster)
  
## Create a 'clustr_data' dataframe similar to 'getregs_data' but with an added cluster ID column. This allows us to have dose-response modelling metrics to illustrate the PPIN network
dr_t_clustr_data <- merge(dr_t_ids, dr_g_string_clustr, by = "gene_id")
  
## Remove genes not associated with a cluster 
dr_t_clustr_data <- subset(dr_t_clustr_data, !is.na(clustr)) 

## Retrieve the clustrfiltr() output
sizelimit <- 4

dr_t_clustrs_filtr <- clustrfiltr(
  getclustrs_data = dr_t_clustr_data,
  size_filtr = sizelimit
)

## Retrieve the clustr_enrichres 
clustr_enrichres <- readRDS(here::here("outputs", params$`file-date`, paste0("clustr_enrichres_", params$`file-date`, ".rds")))

## Select only the highlighted GO terms
clustr_enrichres_gostres <- clustr_enrichres$gostres$result |> 
        dplyr::filter(
          ((grepl("GO", source) & highlighted == TRUE) | (!(grepl("GO", source))))
        )

# Select only pathways within 5<x<500 of gene set size
clustr_enrichres_gostres_filtered <- clustr_enrichres_gostres |> 
  dplyr::filter(
    5 <= term_size & term_size <= 500
  )

# Transform the dataframe from c_a to g_a format. The intersection column holds the gene ids that intersect between the query and term. The term_name a,d term_id are the respective names and ids for each term. The source represents the databases from which the term is from.
dr_g_a_clustr_enrichres_gostres_filtered <- clustr_enrichres_gostres_filtered |> 
      tidyr::separate_rows(intersection, sep = ",") |> 
      dplyr::select(intersection, query, term_name, term_id, source) |> 
      dplyr::rename(gene_id = intersection, 
                    clustr = query)

# Group the data by cluster and term name, count the number of unique Ensembl gene IDs per combination of cluster and term name, then ungroup the data to remove groupings      
termcount <- dr_g_a_clustr_enrichres_gostres_filtered  |> 
        dplyr::group_by(clustr, term_name) |> 
        dplyr::summarise(n_genes = length(unique(gene_id)), .groups = "drop") |> 
        dplyr::ungroup()  
      
# Filter out biological functions enriched by less than the specified number of genes
clustr_enrichres_gostres_filtered_more <- subset(termcount, n_genes >= 3)
      
# Merge the filtered biological functions with the gprofiler2::gost() results
clustr_enrichres_gostres_filtered_more <- merge(clustr_enrichres_gostres_filtered, clustr_enrichres_gostres_filtered_more, by.x = c("query", "term_name"), by.y = c("clustr", "term_name"))

# Remove the "n_genes" column
clustr_enrichres_gostres_filtered_more$n_genes <- NULL

## Retrieve the  clustr_fusionres
clustr_fusionres <- clustrfusion(
  clustrenrich_data = clustr_enrichres
)

## Load the lonely fishing results 
lonelyfishing_data <- readRDS(here::here("outputs", params$`file-date`, paste0("lonely_fishres_", params$`file-date`, ".rds")))

# Filtering all genes not part of clusters : the lonely genes
dr_t_no_clustr <- dr_t_ids[!(dr_t_ids$gene_id %in% clustr_fusionres$dr_g_a_fusion$gene_id),] 

# Filtering annotations based on enriched biological functions
# In the fishing process, the function only considers terms and pathways that are enriched. In this case, Keep rows with term_names present in cluster fusion data
dr_g_a_annots_filtr <- clustr_enrichres$dr_g_a_whole |> 
      dplyr::filter(term_name %in% clustr_fusionres$dr_g_a_fusion$term_name)
    
# Merge lonely gene data with enriched function annotation data utilizing an inner_join operation. This ensures that only rows existing in both dataframes are retained from the first dataframe. Given that multiple terms are typically linked to one gene, the relationship is designated as many-to-many.
dr_g_a_no_clustr <- dplyr::inner_join(dr_t_no_clustr, dr_g_a_annots_filtr, by = "gene_id", relationship = "many-to-many")
    
# Select columns for fishing: "gene_id" to fish and "term_name" for fishing. Remove duplicates.
dr_g_a_no_clustr <- dr_g_a_no_clustr |> 
      dplyr::select(gene_id, term_name) |> 
      dplyr::distinct()
# This is the dataframe of lonely genes with Ensembl gene IDs and associated term names, susceptible to be fished into clusters.
    
## Expand clusters by fishing lonely genes sharing the same driver-GO and other (KEGG, WP) annotations as a cluster
    
# Remove "gene_id" column to avoid conflicts, then remove duplicate rows to pass from "g_a" to "a".
dr_a_fusion_modif <- clustr_fusionres$dr_g_a_fusion |> 
      dplyr::select(-gene_id) |> 
      dplyr::distinct()
    
# Merge modified cluster fusion data and annotated lonely gene data
dr_g_a_lonely_data <- merge(dr_g_a_no_clustr, dr_a_fusion_modif, by = "term_name")
    
    
# Get biologicaly annotated genes without clusters for the following messages
dr_g_a_no_clustr_annotated <- dr_t_ids |> 
      dplyr::filter((!gene_id %in% clustr_fusionres$dr_g_a_fusion$gene_id) &
                      gene_id %in% clustr_enrichres$dr_g_a_whole$gene_id)
    
# Get genes without clusters for the following messages
dr_g_a_no_clustr <- dr_t_ids |> 
      dplyr::filter((!gene_id %in% clustr_fusionres$dr_g_a_fusion$gene_id))
    

# Modify the "transcript_id" column to "id" for easier merge and integration to DRomics visualisations
names(lonelyfishing_data$dr_t_c_a_fishing)[names(lonelyfishing_data$dr_t_c_a_fishing) == "transcript_id"] <- "id"


# Combine DRomics info and the workflow info
b_lonely_fishres <- merge(lonelyfishing_data$dr_t_c_a_fishing, BMDres_definedCI,  by = "id")

# Load the lonely cluster functional enrichment results
lonely_cluster_analysis_res <- readRDS(here::here("outputs", params$`file-date`, paste0("lonely_clustr_analysis_res_", params$`file-date`, ".rds")))

```

 

## Introduction

The cluefish workflow seeks to enhance the biological interpretation of transcriptomic dose-response modeling data, particularly following the DRomics analysis. Its primary goal is to comprehensively characterize the data while ensuring an unbiased and non-targeted approach. By doing so, we aim to not only maximize the depth of the analysis but also maintain objectivity throughout.

To evaluate the efficacy of this workflow, we can contrast its outcomes with those of a standard workflow, which typically involves functional enrichment analysis on the single list of deregulated transcript genes. This comparative analysis will provide insights into the strengths and potential advantages of cluefish.

 

## Comparing initial enriched term content

Here we exclusively compare the enriched terms identified by the two distinct workflows: the standard workflow, which uses the entire gene list as query for the functional enrichment, and the cluefish workflow, which uses all clusters as individual queries. This comparison is conducted separately for each data source.

::: {.callout-important appearance="simple"}
## Important

This comparison solely focuses on the enriched terms and without any filtering performed. Thus, the results for the cluefish workflow are derived specifically from the **clustrenrich\$gostres** output of the **clustrenrich()** function.
:::

### Standard workflow results

::: fullwidth
```{r}
#| label: tbl-standenrich
#| tbl-cap: "Standard workflow functional enrichment results"
#| tbl-cap-location: margin
#| echo: false

# Generate the interactive table 
stand_unfiltered |> 
  dplyr::select(term_name, term_id, term_size, query_size, intersection_size, p_value, effective_domain_size) |> 
  DT::datatable(options = list(pageLength = 5), class = c("compact", "hover", "row-border", "order-column")) |> 
  DT::formatStyle(columns = c(1, 2, 3, 4, 5, 6, 7), fontSize = '80%')
```
:::

### cluefish workflow results

::: fullwidth
```{r}
#| label: tbl-propoenrich
#| tbl-cap: "cluefish workflow functional enrichment results"
#| tbl-cap-location: margin
#| echo: false

# Generate the interactive table 
clustr_enrichres_gostres |> 
  dplyr::select(query, term_name, term_id, term_size, query_size, intersection_size, p_value, effective_domain_size) |> 
  DT::datatable(options = list(pageLength = 5), class = c("compact", "hover", "row-border", "order-column")) |> 
  DT::formatStyle(columns = c(1, 2, 3, 4, 5, 6, 7), fontSize = '80%')
```
:::

### Venn diagrams between both workflow per source

```{r}
#| label: fig-venn1
#| fig-cap: "Venn diagram of highlighted enriched GO terms between the standard and cluefish workflow "
#| cap-location: margin
#| echo: false
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-asp: 0.618

stand_go <- unique((stand_unfiltered |> 
  dplyr::filter(source == "GO:BP"))$term_name)

propo_go <- unique((clustr_enrichres_gostres |> 
  dplyr::filter(source == "GO:BP"))$term_name)

lonely_go <- unique((lonely_cluster_analysis_res$unfiltered$dr_g_a |> 
                      dplyr::filter(source == "GO:BP"))$term_name)

propo_lonely_go <- unique(c(propo_go, lonely_go))

venn.plot <- draw.pairwise.venn(area1 = length(stand_go), area2 = length(propo_lonely_go), 
                   cross.area = length(which(stand_go %in% propo_lonely_go)), 
                   category = c("standard", "cluefish"),
                   cat.col=c("black", "black"), col=c("black", "black"), 
                   fill = c("#8de4d3", "#daa4f9"), lty = "blank", cat.pos = c(1,11))

grid.draw(venn.plot)
```

```{r}
#| label: fig-venn2
#| fig-cap: "Venn diagram of enriched KEGG pathways between the standard and cluefish workflow "
#| cap-location: margin
#| echo: false
#| fig-align: "center"
#| fig-asp: 0.618

stand_go <- unique((stand_unfiltered |> 
  dplyr::filter(source == "KEGG"))$term_name)
propo_go <- unique((clustr_enrichres_gostres |> 
  dplyr::filter(source == "KEGG"))$term_name)

lonely_go <- unique((lonely_cluster_analysis_res$unfiltered$dr_g_a |> 
                      dplyr::filter(source == "KEGG"))$term_name)

propo_lonely_go <- unique(c(propo_go, lonely_go))


venn.plot <- draw.pairwise.venn(area1 = length(stand_go), area2 = length(propo_lonely_go), 
                   cross.area = length(which(stand_go %in% propo_lonely_go)), 
                   category = c("standard", "cluefish"),
                   cat.col=c("black", "black"), col=c("black", "black"), 
                   fill = c("#8de4d3", "#daa4f9"), lty = "blank", cat.pos = c(1,11))

grid.draw(venn.plot)

```

```{r}
#| label: fig-venn3
#| fig-cap: "Venn diagram of enriched Wikipathways between the standard and cluefish workflow "
#| cap-location: margin
#| echo: false
#| fig-align: "center"
#| fig-asp: 0.618

stand_go <- unique((stand_unfiltered |> 
  dplyr::filter(source == "WP"))$term_name)
propo_go <- unique((clustr_enrichres_gostres |> 
  dplyr::filter(source == "WP"))$term_name)

lonely_go <- unique((lonely_cluster_analysis_res$unfiltered$dr_g_a |> 
                      dplyr::filter(source == "WP"))$term_name)

propo_lonely_go <- unique(c(propo_go, lonely_go))


venn.plot <- draw.pairwise.venn(area1 = length(stand_go), area2 = length(propo_lonely_go), 
                   cross.area = length(which(stand_go %in% propo_lonely_go)), 
                   category = c("standard", "cluefish"),
                   cat.col=c("black", "black"), col=c("black", "black"), 
                   fill = c("#8de4d3", "#daa4f9"), lty = "blank", cat.pos = c(1,11))

grid.draw(venn.plot)
```

## Comparing enriched term content after filters in the cluefish workflow

With filters applied to the enriched terms within following steps of the standard and cluefish workflow, we can re-examine the discrepancies between enriched terms considered between both workflow.

### Standard workflow results

::: fullwidth
```{r}
#| label: tbl-standenrichfilter
#| tbl-cap: "Standard workflow functional enrichment results"
#| tbl-cap-location: margin
#| echo: false

# Generate the interactive table 
stand_filtered |> 
  dplyr::select(term_name, term_id, term_size, query_size, intersection_size, p_value, effective_domain_size) |> 
  DT::datatable(options = list(pageLength = 5), class = c("compact", "hover", "row-border", "order-column")) |> 
  DT::formatStyle(columns = c(1, 2, 3, 4, 5, 6, 7), fontSize = '80%')
```
:::

### cluefish workflow results

::: fullwidth
```{r}
#| label: tbl-propoenrichfilter
#| tbl-cap: "cluefish workflow functional enrichment results"
#| tbl-cap-location: margin
#| echo: false

# Generate the interactive table 
clustr_enrichres_gostres_filtered_more |> 
  dplyr::select(query, term_name, term_id, term_size, query_size, intersection_size, p_value, effective_domain_size) |> 
  DT::datatable(options = list(pageLength = 5), class = c("compact", "hover", "row-border", "order-column")) |> 
  DT::formatStyle(columns = c(1, 2, 3, 4, 5, 6, 7), fontSize = '80%')
```
:::

### Venn diagrams between both workflows per source after filters in the cluefish workflow

```{r}
#| label: fig-venn4
#| fig-cap: "Venn diagram of highlighted enriched GO temrs in the standard and filtered highlighted enriched GO terms in the cluefish workflow"
#| cap-location: margin
#| echo: false
#| fig-align: "center"
#| fig-asp: 0.618

stand_go <- unique((stand_filtered |> 
  dplyr::filter(source == "GO:BP"))$term_name)
propo_go <- unique((clustr_enrichres$dr_g_a_enrich |> 
  dplyr::filter(source == "GO:BP"))$term_name)

lonely_go <- unique((lonely_cluster_analysis_res$filtered$dr_a |> 
                      dplyr::filter(source == "WP"))$term_name)

propo_lonely_go <- unique(c(propo_go, lonely_go))


venn.plot <- draw.pairwise.venn(area1 = length(stand_go), area2 = length(propo_lonely_go), 
                   cross.area = length(which(stand_go %in% propo_lonely_go)), 
                   category = c("standard", "cluefish"),
                   cat.col=c("black", "black"), col=c("black", "black"), 
                   fill = c("#8de4d3", "#daa4f9"), lty = "blank", cat.pos = c(1,11))


grid.draw(venn.plot)
```

```{r}
#| label: fig-venn5
#| fig-cap: "Venn diagram of enriched KEGG pathways in the standard and filtered enriched KEGG pathways in the cluefish workflow"
#| cap-location: margin
#| echo: false
#| fig-align: "center"
#| fig-asp: 0.618

stand_go <- unique((stand_filtered |> 
  dplyr::filter(source == "KEGG"))$term_name)
propo_go <- unique((clustr_enrichres$dr_g_a_enrich |> 
  dplyr::filter(source == "KEGG"))$term_name)

lonely_go <- unique((lonely_cluster_analysis_res$filtered$dr_a |> 
                      dplyr::filter(source == "WP"))$term_name)

propo_lonely_go <- unique(c(propo_go, lonely_go))


venn.plot <- draw.pairwise.venn(area1 = length(stand_go), area2 = length(propo_lonely_go), 
                   cross.area = length(which(stand_go %in% propo_lonely_go)), 
                   category = c("standard", "cluefish"),
                   cat.col=c("black", "black"), col=c("black", "black"), 
                   fill = c("#8de4d3", "#daa4f9"), lty = "blank", cat.pos = c(1,11))

grid.draw(venn.plot)
```

```{r}
#| label: fig-venn6
#| fig-cap: "Venn diagram of enriched Wikipathways in the standard and filtered enriched Wikipathways in the cluefish workflow"
#| cap-location: margin
#| echo: false
#| fig-align: "center"
#| fig-asp: 0.618

stand_go <- unique((stand_filtered |> 
  dplyr::filter(source == "WP"))$term_name)
propo_go <- unique((clustr_enrichres$dr_g_a_enrich |> 
  dplyr::filter(source == "WP"))$term_name)

lonely_go <- unique((lonely_cluster_analysis_res$filtered$dr_a |> 
                      dplyr::filter(source == "WP"))$term_name)

propo_lonely_go <- unique(c(propo_go, lonely_go))


venn.plot <- draw.pairwise.venn(area1 = length(stand_go), area2 = length(propo_lonely_go), 
                   cross.area = length(which(stand_go %in% propo_lonely_go)), 
                   category = c("standard", "cluefish"),
                   cat.col=c("black", "black"), col=c("black", "black"), 
                   fill = c("#8de4d3", "#daa4f9"), lty = "blank", cat.pos = c(1,11))

grid.draw(venn.plot)
```

 

## A short summary

The extent of what we can gather, or *what are we working with*, is based on the following question: *how many transcript are considered in the interpretation phase?* And *what is left to be overlooked?*

```{r}
#| echo: false

dr_t_a_stand_ids <- merge(dr_g_a_stand, dr_t_ids, by = "gene_id")

cluster_transcripts <- (b_lonely_fishres |> 
  dplyr::filter(new_clustr != "Lonely"))$id

# Retrieve transcript ids for the lonely genes
lonely_ids_data <- merge(lonely_cluster_analysis_res$filtered$dr_g_a, dr_t_ids, by = "gene_id")

lonely_transcripts_enrich <- unique(lonely_ids_data$ensembl_transcript_id)

total_considered_in_propos <- unique(c(cluster_transcripts, lonely_transcripts_enrich))


```

| Metric | Standard | cluefish |
|----------------|-----------------------------|---------------------------|
| Number of transcripts considered | `r length(unique(dr_t_a_stand_ids$transcript_id))` | `r length(unique(total_considered_in_propos))` |
| Number of lonely transcripts | `r length(unique(BMDres_definedCI$id)) - length(unique(dr_t_a_stand_ids$transcript_id))` | `r length(unique(BMDres_definedCI$id)) - length(unique(total_considered_in_propos))` |

: Summary of the comparison between both workflow {#tbl-dromics .bordered .light}

However, within the cluefish workflow, the lonely cluster consisting of all the lonely content (transcripts/genes) remains open for exploration. Within the **"lonely_results_report.qmd"**, an additional functional enrichment analysis is conducted using the lonely gene list as the query. This approach enables us to delve into what might be overlooked and whether there is any biological significance within this group.
